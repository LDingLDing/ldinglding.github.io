<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>芦荟的个人网站 - Aloea&#39;s Personal Website</title>
    <link>https://blog.liluhui.cn/</link>
    
    <image>
      <url>https://blog.liluhui.cn/asset/img/logo-green.ico</url>
      <title>芦荟的个人网站 - Aloea&#39;s Personal Website</title>
      <link>https://blog.liluhui.cn/</link>
    </image>
    
    <atom:link href="https://blog.liluhui.cn/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>关于生活、学习、工作</description>
    <pubDate>Sat, 02 Dec 2023 14:34:52 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>2023年11月总结</title>
      <link>https://blog.liluhui.cn/2023/12/02/202311/</link>
      <guid>https://blog.liluhui.cn/2023/12/02/202311/</guid>
      <pubDate>Sat, 02 Dec 2023 14:13:34 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;一种脑力和体力充分燃烧的轻盈感&lt;/p&gt;
&lt;p&gt;恋爱反而让人混沌又沉重啊&lt;/p&gt;
&lt;h1 id=&quot;学习与成长&quot;&gt;&lt;a href=&quot;#学习与成长&quot; class=&quot;headerlink&quot; title=&quot;学习与成长&quot;&gt;&lt;/a&gt;学习与成长&lt;/h1&gt;&lt;p&gt;01&lt;/p&gt;
&lt;p&gt;疯狂大量地</description>
        
      
      
      
      <content:encoded><![CDATA[<p>一种脑力和体力充分燃烧的轻盈感</p><p>恋爱反而让人混沌又沉重啊</p><h1 id="学习与成长"><a href="#学习与成长" class="headerlink" title="学习与成长"></a>学习与成长</h1><p>01</p><p>疯狂大量地学习提示工程，把之前零碎的知识又系统化理了遍，实用角度来说目前水也不是很深 .. 上个月自己折腾的langchain项目被我停了，做了一半发现做出来也没啥用，当时还是没想明白。</p><p>02<br>在看一些瑜伽的书，11月回到我最初带我入门的老师身边学习，越来越确定这是可以践行一生的事情，它幸苦又有趣，丰富且复杂，冲突又求真， 回看自己这几年的变化，自己在习练中的局限和成长。</p><br /><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>01</p><p>投入做一个AI小程序，为各种接龙问题提供智能订单解析及打印。目前核心流程都都开发完成了，界面还比较粗糙，12月开始运营验证。</p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/12/02/Pasted%20image%2020231202214923.png" alt="image.png"></p><p>02<br>unity 项目阶段收工，下一波等年度总结再规划了。忙碌又有些错乱的节奏，好在也是阶段性的吧。个人角度还是希望继续拓展这块的，可惜公司内能投入的非常有限。</p><br /><h1 id="娱乐与生活"><a href="#娱乐与生活" class="headerlink" title="娱乐与生活"></a>娱乐与生活</h1><p>01<br>这个月确实非常忙碌，只有工作日和学习日，仅有的娱乐一本书《太白金星有点烦》.. 哦对，还有工作日和同事们一起去看了魔术表演，逗了看上去很肥美的昂贵鸟儿们 😄</p><p>02<br>疯狂运动，除了工作和睡觉都在运动（一点没瘦）。也不是瞎运动，确实最近进步很大，就是那种刚迈上一个新台阶的欣喜，呼吸变得更加深长了，肩背发力开始有细节了。当然这个月也不是那么顺利，没控住练废了几次 .. </p><p>03<br>因为瑜伽认识了很多新朋友，来自不同年龄和经历的朋友，双休的正午一起晒着太阳聊体式、聊困惑、聊经历，下午又随着太阳一起一次次的拜日，真的如《瑜伽经》中所说的那种燃烧能量后的轻盈感。</p><br /><h1 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h1><p>没有什么大动作，保持在场。<br>接近年度复盘了，看了下22年和23年都是亏着的，大环境如此，仓位依然非常安心，反而产生担心是不是太安心了涨起来仓位不够重。但严守策略，不贪，保证活着。下个月要做年度复盘了，目前看至少回撤控制我非常满意，当然能不能跟住上涨依然存疑。</p><br /><br /><br /><br /><br /><br />]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E7%94%9F%E6%B4%BB/">生活</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/12/02/202311/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023年10月总结</title>
      <link>https://blog.liluhui.cn/2023/11/01/202310/</link>
      <guid>https://blog.liluhui.cn/2023/11/01/202310/</guid>
      <pubDate>Wed, 01 Nov 2023 14:46:53 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;兄弟，这是纸糊的英雄主义！&lt;br&gt;放弃，这是每个傻瓜随时随地都会做的，这是摆脱困境最胆怯最浮躁的手段！&lt;/p&gt;
&lt;br/&gt;

&lt;h1 id=&quot;学习与成长&quot;&gt;&lt;a href=&quot;#学习与成长&quot; class=&quot;headerlink&quot; title=&quot;学习与成长&quot;&gt;&lt;/a&gt;学习与成长</description>
        
      
      
      
      <content:encoded><![CDATA[<p>兄弟，这是纸糊的英雄主义！<br>放弃，这是每个傻瓜随时随地都会做的，这是摆脱困境最胆怯最浮躁的手段！</p><br/><h1 id="学习与成长"><a href="#学习与成长" class="headerlink" title="学习与成长"></a>学习与成长</h1><p>01<br>越来越喜欢与书籍交谈，越来越看淡人际交往，有点遗憾，不应该是这样的。在木心博物馆看到一些手稿很受触动，自省自己的傲慢，自省自己的理性，自省所谓的”有用之学“。有点想了解看不上的文学了，但还是会忙碌于各种各样的优先级里，我想可能每个十年都有它的使命，现在，坚定有用吧！我不擅长的且想要成长的，是试着和更厉害的人对话。</p><p>02<br>在用Langchain搞小项目，进度有点慢，也是工作和杂事太满，总是规划不出整片的时间来处理，下个月估计能完成个七八十的初版，干起来嘎嘎。</p><br/><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>01<br>折腾unity数字化项目、折腾新媒体体系数据监控分析、折腾AI脚本和视频切片。杂七杂八做了些事，心底还是想做 unity 或是渲染那一块的，可是环境变了，总有能做的事情，但并不会总是最想做的事情。不能总是归因于个体意愿，很多时候环境不见得提供得了支持，相互施压没有帮助，土壤和树苗本就是相互成就的。</p><p>02<br>时代变了，面试者的质量每况愈下，AI选手也逐渐变多，面试流程和方式方法得做一些变革了，谁来扛起这面被压着的大旗呢。</p><br/><h1 id="娱乐与生活"><a href="#娱乐与生活" class="headerlink" title="娱乐与生活"></a>娱乐与生活</h1><p>01<br>在明媚又恰当的季节里，摆满鲜花，心情愉悦。</p><p>02<br>赶早去了乌镇戏剧节，刺眼又强烈的阳光，搞怪又认真的演员，席地而坐着看演出，拥挤的人群从眼前就慢慢消失了，我喜欢认真的人们，这里充满善意。</p><p>03<br>每周瑜伽和慢跑，倒立在这两个多月的持续小锻炼下有了重大的突破，对于肩背的感受从无到有，开始能感受到上背和臂膀发力的细节，开始能完全脱离墙面有控制的上下，感谢自己的持续习练，每天倒个立，提神醒脑。下个月，要开启瑜伽的新研学课堂啦 💪</p><br/><h1 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h1><p>01<br>又来到了3000点保卫战，这些年看起来点数没变，性价比确实越来越高了，指数越来越有价值了，汇金也下场了，这个点位已经很有政策态度了。<br>担心全球利率水平的风险，担心这已经不是一个短期的问题，0%-2%的低利率发展红利还能持续吗，经济周期的拐点真的到了吗。<br>整体小加了一点仓位，目前现金筹码还有40%上下，谨慎乐观。</p><p>02<br>长线投资者和短线投资者玩的是两种截然不同的游戏。<br>不要贸然从那些与你不同的人身上学习理财经验。</p><p>尽可能努力明确自己玩得是什么游戏。</p><br/>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E7%94%9F%E6%B4%BB/">生活</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/11/01/202310/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023年9月总结</title>
      <link>https://blog.liluhui.cn/2023/10/01/202309/</link>
      <guid>https://blog.liluhui.cn/2023/10/01/202309/</guid>
      <pubDate>Sun, 01 Oct 2023 14:36:38 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;玩乐与社交满满&lt;br&gt;delay delay delay&lt;/p&gt;
&lt;p&gt;九月，淡淡的桂花香配着茶香，奔跑着恍惚气味不见了。&lt;/p&gt;
&lt;h1 id=&quot;学习与成长&quot;&gt;&lt;a href=&quot;#学习与成长&quot; class=&quot;headerlink&quot; title=&quot;学习与成长&quot;&gt;&lt;/a&gt;学习</description>
        
      
      
      
      <content:encoded><![CDATA[<p>玩乐与社交满满<br>delay delay delay</p><p>九月，淡淡的桂花香配着茶香，奔跑着恍惚气味不见了。</p><h1 id="学习与成长"><a href="#学习与成长" class="headerlink" title="学习与成长"></a>学习与成长</h1><p>01<br>想明白一些事情，对自己设定的“我应该”中兴趣驱动和负责心产生了强烈的碰撞，换个角度看，很羡慕领导的“不负责任”，或许追求责任心反而无法成事，总想着找到现在看起来就成立的平衡点只是让自己陷入在纠结和精力分散之中，我信信念，信才能成。<br>那么费心又不讨好，是缺少了对自己状态负责的责任心。<br><br /></p><p>02<br>在瑜伽上九月有好多精进，倒立能起来了、轮式也越来越顺，从一堂课只能起一次标准轮、到能完整跟完做单腿轮，甚至成功了自己从狂野到轮，为自己开心。 😊<br>课堂之外也更有干劲，倒立能起来了，能感受自己肩背的抖动、能感觉到腹股沟力量的短缺，这些感受都是一次次练习下忽然而至、又逐渐加强，一天两天不见起色，但是一周两周总是能有一点点点的进步，只要坚持做下去，带上好奇和精进的心，事情总会有起色的。<br>报了VEDA的瑜伽与冥想学术课程，预计十月上可以上完，听不懂得太多，现世实用价值有，形而上的东西更多，瑜伽之上有社会学、哲学、神学、医疗… 庞大又神秘的东西总是很吸引人的。但我至少厘清了一点，瑜伽无法解读虚无，神我之上全是矛盾。<br>我想试试探索，和左脑断开连接的直觉智慧。什么样的直觉是智慧呢。<br><br /></p><p>03<br>总是可以，从过往的自己身上找到力量。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/10/01/Pasted%20image%2020231001215150.png" class="left" width="366"><br /><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>01<br>这个月主要在搞 RPA 和 unity，把新媒体这块的数据采集搭建起来，把公司的几个抖音账号和小红书账号都接入进来了，结合数仓和BI，所有数据都沉淀下来分析，后续还要完善操作监控点还有其他平台，现在团队扩展还没开始，算是个准备工作。unity 还是之前的政府项目，主要是在对外核对上，工程相关的细节问题不少，对接和整理工作量挺大，开发部分反倒算是见缝插针着做。<br>AIGC 脚本生成这块也在持续迭代，现在问题是应用方体量太小进度太慢，下个月我得去发展下应用侧，不然迭代反馈太少太慢。<br><br /></p><p>02<br>这个月开放了急招HC，面试了不少人，笔试题筛得很无语，这两年明显的每个批次比上一批次更差，学历是差不多的，就是答题思路和完成度越来越离谱，通过率越来越低。一方面可能因为工资的筛选，另一方面和公司外的伙伴聊也是，技术新人水平越来越差了。<br><br /></p><h1 id="娱乐和生活"><a href="#娱乐和生活" class="headerlink" title="娱乐和生活"></a>娱乐和生活</h1><p>01<br>九月过得太充实，没有一个双休不在外面。<br>密集的团建月，公司的、各个团队的，胡吃海喝，倒也没胖。<br>九月还是我们的恋爱纪念日，一如往年拍了写真，今年的风格超酷。<br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/10/01/1.jpg" alt="image.png"></p><p>这个月回忆下吃了好多顿自助，海鲜、烧烤.. 短时间不想碰了。和同事们一起做了烘焙蛋糕和饼干，味道一般，但是造型都超可爱的。还有去景德镇捏了泥巴，还有烧玻璃，带回来的战利品已经猝了一半哈哈。<br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/10/01/mmexport1695356962667%20%281%29.jpg" alt="image.png"><br><br /></p><p>02<br>体验了次一对一的声乐教学，算巧合吧，老师说我的嗓子底色很不错，可是是个完全没有技巧的大白嗓。喜欢唱歌，也挺想学的，但是，总有很多重要的事，这种可能性就只能搁置啦。 —— 人生为什么总有那么多兴趣诱惑呢<br><br /></p><p>03<br>第二时间去看了诺兰新作《奥本海默》，真是一个好故事，看完电影两个人沉默了好一会，我喜欢这些音乐，它们在画面之外却铺满了信息，社会需要政治，又不能极端政治，不能考验掌握能力的人性是不是就该断绝能力发展的可能。</p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/10/01/designteam_Huge_fire_above_the_desert_mushroom_cloud_mechanical_f.png" alt="image.png"><br><br /></p><h1 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h1><p>美债利率的风险爆不爆都有可能，经济压力太大了，顺利就是看好明年，不顺利就是明后年跌下谷底，手头的仓位不敢激进，做好安全边际的评估。</p><p>感概房住不炒就这么放开了，恍惚这就已经7年过去了，房产也该周期轮转了。</p><p>风险与机遇并存的时间段，恒生都跌下了 18000 点。</p>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E7%94%9F%E6%B4%BB/">生活</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/10/01/202309/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023年8月总结</title>
      <link>https://blog.liluhui.cn/2023/09/01/202308/</link>
      <guid>https://blog.liluhui.cn/2023/09/01/202308/</guid>
      <pubDate>Fri, 01 Sep 2023 14:57:19 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;一呼一吸间的急促&lt;br /&gt;一呼一吸间的批判&lt;br /&gt;一呼一吸间的期待&lt;br /&gt;一呼一吸间的觉察&lt;br /&gt;一呼一吸间的自由&lt;br /&gt;一呼一吸间的喜悦&lt;/p&gt;
&lt;h1 id=&quot;工作和成长&quot;&gt;&lt;a href=&quot;#工作和成长&quot; class=&quot;headerlink&quot; tit</description>
        
      
      
      
      <content:encoded><![CDATA[<p>一呼一吸间的急促<br />一呼一吸间的批判<br />一呼一吸间的期待<br />一呼一吸间的觉察<br />一呼一吸间的自由<br />一呼一吸间的喜悦</p><h1 id="工作和成长"><a href="#工作和成长" class="headerlink" title="工作和成长"></a>工作和成长</h1><p>01<br />8月重点研究了Prompt文本结构，一开始想找到一个万全的元结构落地到我们的视频脚本生成业务里，什么3R、RPPRWI、CRISPE、TRACI … <br />研究了很多案例和大语言模型之后发现，这些东西更适合叫做“功法”，是适合入门操作时不出错指南，它的粒度很粗同时宽容度很高。<br />与任何大模型交流&#x2F;调教的过程，基本就是一个拆解和明确任务的过程，为什么会有角色指定，就是要告诉它你是谁，如果你想告诉的更清晰，就是它应该掌握的技能明确地指定给它。<br />这些 Structured Prompt 中无不贯穿着这些思想，指定工作流、指定受众、指定背景知识、指定目标… <br />所有结构只是招式，但我们在用的时候一定要明白每一个场景去拆解和明确任务的维度是不一样的。<br />你去安排一个销售人员制定市场计划和去安排产研团队推进业务规划所给到的信息结构和沟通方式也是不一样的。<br />流程上你是细节导向呢，还是分解导向？结果上你是不断解释调整呢，还是不断示例调整？对吧，方式方法有很多的。<br />而且这个东西要专业化，必然得人的经验先行，不然只能得出个勉强及格的东西，至少在我实践的视频脚本生成领域完全是这样的，我们要做的是能达到2-3年短视频脚本经验的员工的程度，涉及到各平台的文本结构、用词、立场、情绪、人设、知识背景等等的调优，都是在和新媒体同学不断复盘中迭代出来的。</p><p>02<br />月中给自己和对象部署了私域的GPT，这样就可以任何时候、任何设备访问了，也可以很方便切换版本。之前被openai不定期封号实在头疼，现在改成走接口代理让专业的人去承担风险，使用上顺畅多了，访问也比用外网服务稳定。<br />claude-2 也是真的不错，对我来说实用已经在 GPT3.5 - GPT4 之间了。</p><p>03<br />开始做同步做 unity 项目，从 unreal 转过来还是陌生的，搞定了WebGL程序包的体积优化，150MB减到90MB，大头都在材质压缩上。</p><p>04<br />月中部署服务把我的域名访问搞崩了，顺着查nginx半天没有任何日志搞的很头疼，睡了一觉起来重新进控制台发现安全组策略好像少了什么，意识到是自己前天某个按钮点下去给删除了。 —— 解决问题有时候确实玄妙，睡一觉就好了。</p><p>05<br />上个月开始一直在跟 GAMES Webinar 每周的讲座，AR 眼动追动、VR 博物馆之类的项目都好有意思，有机会也想整点一起做出点东西来。因为这个兴趣，最近双休跑博物馆都变多了😅。</p><p>06<br />习惯是很诱人的，人们并不喜欢先进的理念，更优雅或有意思的东西<br />即使是负责人，也别抱太大期待<br />对于人性来说，那都是麻烦<br />总要有人来开路，即使倒在半路，也必然倒在半路</p><p>07<br />Learn to sell. Learn to build. If you can do both, you will be unstoppable.</p><h1 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h1><p>01<br />这个月读完了四本书，基本和狗子一起吹着空调看完的，夏日的幸福。</p><p>02<br /><a href="https://book.douban.com/subject/35882510/">《你的灯还亮着吗》</a>很适合拿来反复阅读，这不就是修行“辨别智”的现代操作指南，宗教和哲学真是大智慧。<br />里面涉及了很多小故事&#x2F;案例，让读者重新去思考究竟面对的是什么问题、以及怎么解决，其实定义问题才是最难的，我很喜欢书名的这个<a href="https://cloud.tencent.com/developer/article/1371032">故事</a>。<br />很多时候我们太急着行动了，工作是、学习是、人际关系也是，为什么问题定义总是那么理所当然，为什么解决问题一定是解决别人？<br />行动是看上最辛苦的事情，但或许反而是最简单的事情。<br />就像那句对千万学子说的话一样，“学习太难了？不，学习是最简单的事情。一旦你想明白了为何而学。”<br />我们喜欢行动，依赖确定性的反馈；我们总想做点什么，不敢信任不为而为。</p><p>03<br /><a href="https://book.douban.com/subject/10486407/">《印度瑜伽与佛教》</a>一本论文专著，并不厚实，意外地好读，当然也不可能全然看懂，但比现在的我读《瑜伽经》一脸茫然来说，论文内容给到很多现代化的论述，竟也可以让我带入到那些时代岁月里的话语中了。<br />把瑜伽和佛教放在一起是件很顺理成章又意料之外的事情。顺理成章是因为它们本就是一家同源，意外的是习练瑜伽这几年老师会提脉轮修习、冥想、禁制等等，却从未提过佛学，它们在历史的发展中已经是完完全全的两个群体了。<br />这本书对我最大的触动是，原来任何古籍都不是时代的切片，它不止是一个时代，它曾经在漫漫岁月中发展，它至今也还在发展，其中有和时代结合的观念革命，也有至今都没有想明白的灵魂发问，它给不出准确的答案，它只是给出一系列引导的可能性。—— 好像和每个人的人生，都挺像的。<br />看完这本书又再一次更喜欢“om”了，简单的吟唱中有身体的共鸣，那感觉从脚趾头到头顶，是灵性的种子。</p><p>04<br />🧘🏻‍♀️心的五种特性，心的一切变化都出自本体极其转变物</p><ol><li>扰心，受三德之中的动性驱动，被感觉拨弄，不断从一个对象转移到另一个对象，常常引起心的骚动，是苦乐的来源之一</li><li>盲心，受惰性、惯性控制，在强烈的惰性驱使下，昏暗不明，心思不能专一</li><li>迁心，对某事物专注一阵子后就涣散，攀缘其他事物，心不稳定，为烦恼多苦，有时也能集中于某一事物，但不能持久</li><li>一心，能够长时间地专注于客体之上，为心的抑制做好了准备，但还未达到断灭</li><li>灭心，所有精神状态都处于控制之下，可以恢复本来的平静心性</li></ol><p>—— 整理自书籍《瑜伽疏》，与正念体验极其贴近，寻找安宁的本我</p><p>05<br /><a href="https://book.douban.com/subject/36397929/">《大模型时代》</a>科普大模型相关技术和应用的读物，我是看作者title读的，帮助顺了下一些知识概念。<br /><a href="https://book.douban.com/subject/36489629/">《一出门就心情好》</a>小红书+后浪出品，一本很可爱的杂志，户外就是很好玩 🥰</p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>01<br />这段书中的描述在冥想习练中很有共鸣</p><blockquote><p>这是瑜伽行者生活中非常真实和单纯的体验。在每一个不分心的片刻，瑜伽师都观察ta正经历的心理状态，努力维持注意力集中、冥想和最终超然的全神贯注状态。干扰和阻碍在这一过程中不断出现，要把我们从这条路途或状态中拉开。我们必须立刻处理它们，平定思维乱流，通过提升它，再次正确地指引它。随着进步，我们感知到，差别在逐渐减少。我们发现自己处在一个范围更小、层面更高的意识领域中，直到不再有差别和变化。在这一时刻，人就处在了完美的全神贯注状态中。</p></blockquote><p>冥想好像在朦胧中来到一种新的状态，我可以不作为旁观和控制而参与其中随时抽离和切换了，就好像参与其中的我和观察者的我可以同时存在了，迷失正在越来越少。或者和状态有些关系，这段时间打坐都比较碎，没有超过过20分钟，也就没有抱着什么期待进入，谁知道呢。</p><p>02<br />某天瑜伽晚课的随记，还能记得那种感觉，活着还挺不错的感觉<br />油然而生的<br />羡慕自己的此时此刻，感激自己的此时此刻</p><blockquote><p>垫子上的汗水，老师的口令，丰富的音乐，悦动的篮球<br>美好，幸福<br>辛苦，嘈杂<br>真实</p></blockquote><p>03<br />例行洗牙，例行医美光电护理，勤劳爱护身体<br />杭州口腔医院和杭州市民报保的合作真不错，第二年薅洗牙的羊毛了，推荐给杭州的朋友</p><p>04<br />本月尝试了新美食 —— 烤猪蹄<br />还行，对比太糯了不够筋道Q弹，不如外面卖的好吃 😅<br /><br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/09/01/2.png" alt="image.png"></p><p>05<br />某天暴走了一圈西湖，当天走了14km，把对象拉爆了 🚶🚶‍♀️<br />顺便看了好多好多的荷花 🪷<br />灵隐寺那人可太多辣 🥵<br /><br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/09/01/1.png" alt="image.png"></p><h1 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h1><p>7月末开始至今布局了科创目标仓位的20%，月末小回弹了，不过也很难一波冲上去，这仓位慢慢加，子弹足。<br />其他没啥动作，9月-12月计划银行的仓位减下来，未来银行让利，这块影响比较大。</p>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E7%94%9F%E6%B4%BB/">生活</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/09/01/202308/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023年7月总结</title>
      <link>https://blog.liluhui.cn/2023/08/04/202307/</link>
      <guid>https://blog.liluhui.cn/2023/08/04/202307/</guid>
      <pubDate>Fri, 04 Aug 2023 14:56:29 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;炎热又连绵雨季的杭州，反复横跳的天气和我的身体状态差不多，在躁动和堕落间反反复复。&lt;/p&gt;
&lt;p&gt;混混沌沌，毫无长进。&lt;/p&gt;
&lt;br/&gt;

&lt;h2 id=&quot;工作和成长&quot;&gt;&lt;a href=&quot;#工作和成长&quot; class=&quot;headerlink&quot; title=&quot;工作和成长&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>炎热又连绵雨季的杭州，反复横跳的天气和我的身体状态差不多，在躁动和堕落间反反复复。</p><p>混混沌沌，毫无长进。</p><br/><h2 id="工作和成长"><a href="#工作和成长" class="headerlink" title="工作和成长"></a>工作和成长</h2><p>7月初暂停了上个项目，领头尽力打开一条路子去做市场验证，这一步终究是来得晚了些，总算是有了能不能做的结论。具体就不在这里多说了，这一年作为参与者其实是有无力感的时段的，收获是对团队里的每个人的特质也更清楚一些，目前的组织结构也有问题，领头去干一片市场出来确实面对很多不确定性，但是看着上层意识的路径依赖也很难受，总之都是难受，不如按我的想法来吧。</p><p>说到路径依赖，我发现更无力感的一件事就是，当你对面的人非常信任自己懂得这个概念的时候。我测试过好几次，人们以为自己懂得这个道理就能做到，但每个人的步子是不一样的，你的腿多长决定了你一步能迈出多少，说到底意愿和能力同样重要。即使对于我，超出某些范围的东西我也会下意识地害怕去面对，但我们需要看到自己不愿面的是什么，这个恐惧的逻辑是怎么产生的。承认做不到一些事才有可能做到一些事，瞎喊口号是没有用的，这对我的触动挺大的。</p><br/>最近嘛，绕不过去的AI，什么都能和AI结合一下，什么也都想和AI结合一下，不过讨论范围还是在熟人圈和公司的小圈子，整个公司层面上上层有想法，拨了一些资源去做，这块我也持续在关注。一方面是 unity + ai 做了一波调研、另外 sd 的使用上尝试了几个火爆的场景出了几波图。另外也把 Copilot 部署到我所有的工作终端了，写 C# 瞬间轻松不少。 <p>接手了一个 unity 的工程，之前一两年都在接触 unreal，本身也有意向适用场景更广的 unity 转，没想到机会来的很合适，就是急了点，手头的其他事情占据了我主要的精力，抽离了几天完成了一个阶段交付版本。</p><br/><h2 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h2><p>花了几天研究给全家补充上了医疗险，整理好了纸质资料准备下次拿给爸妈。比较遗憾是我有结节导致商业医疗险过不了，只能买惠民保一类兜大大底的医疗险。这样到目前为止陆陆续续一年家庭的基础保险体系算完成一版了，意外、重疾、医疗都覆盖上了，目前不是很理解，不过对象还是挺开心的。</p><p>股债没啥大动作，开始左侧布局科创50，资产统计表做了一版大迭代，用风险评级和流动性评级替换了上一版一个维度的分组，一些计算公式也做了改进，还不错，整理表格比看到数字更心情舒畅些。</p><br/><h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><p>进了一个新的瑜伽馆，每周2-3节在课堂，1-2节在家里，挺满意的，周末的清晨起来拜日是一种享受，从喜欢自己的一天开始。每到一个新馆都会遇到很多厉害的习练者，不是很想跟着大家挑战高体，想要安安静静地打好基础，不过身体的信号我还是激进了一些，筋膜紧张的很。</p><p>例行的每月医美光电，因为最近的痘痘尝试一套消炎的伊肤泉微针，术后一周多开始疯狂爆痘，虽然有预期，还是难受，手痒就很难保证卫生，一思考事情的事情，总是管不住。</p><br/><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>二手出掉了一批今年淘汰下来的电器和设备，遇到的买家都很爽快，浅浅回了一点血，让小家更简洁一些，也借机把一柜子的“可能会出二手的箱子”整顿了下，一面衣柜塞满了的包装箱子，想来也是有点好笑的。</p><p>另外想到移动的套餐还是用的大学的，资费太贵的，历时2天通过客服换了28&#x2F;月通用20G的套餐，想想之前68&#x2F;月的套餐也不知不觉用了十年了。</p><p>这个月看了《午夜巴黎》《冈仁波齐》《长安三万里》三部电影。很喜欢这次追光动画的长安，当诗歌有了具体的时代背景、有了画面，语文课本里的诗也变得有了情绪。了解李白甚至连寒门都不是，千辛万苦进了翰林院的不得开心颜，兜兜转转至死都没能施展纵横之术，也会深深的叹息。倒是阴错阳差因为诗的才气共鸣了那么多后人，原来唐朝人人都会写诗啊，就像今天谁都能随口哼唱两句一样。即使影片为了结构做了改编和简化，还是会感慨历史的复杂性、人的复杂性，近看每个人的一生都似流水账，远看原来人生关键转折点来得多么猝不及防。<br>酒真是个好东西啊，酒真是个好东西<br>总之，推荐给各位成年人，但不推荐小孩子看。</p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/08/04/caswl.png" alt="image.png"></p><br/><p>看完冈仁波齐后才发现原来手边的瑜伽相关书籍的封面就是它，奇妙的缘分。《冈仁波齐》是一部关于信仰的伪纪录片，我倒觉得它更应该是一部关于修行的纪录片，我们都是借由一些方式向内探索，朝圣是在每一个叩拜中感受痛苦、直面质问、接纳自我、打开连接，冥想也是，瑜伽也是。</p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/08/04/grbq.png" alt="image.png"></p><br/><p>《午夜巴黎》的母题很清晰，它就是想阐述一个点 —— 最好的时代不在未来，最好的时代也不在过去，当下就是最好的时代。其实有点活在当下那意思，不是只会幻想或者抱怨，积极投入当下时代的建设中。</p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/08/04/wybl.png" alt="image.png"></p>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E7%94%9F%E6%B4%BB/">生活</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/08/04/202307/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>每个人都应该有点人生哲学（上）</title>
      <link>https://blog.liluhui.cn/2023/04/27/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E5%BA%94%E8%AF%A5%E6%9C%89%E7%82%B9%E4%BA%BA%E7%94%9F%E5%93%B2%E5%AD%A6%EF%BC%88%E4%B8%8A%EF%BC%89/</link>
      <guid>https://blog.liluhui.cn/2023/04/27/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E5%BA%94%E8%AF%A5%E6%9C%89%E7%82%B9%E4%BA%BA%E7%94%9F%E5%93%B2%E5%AD%A6%EF%BC%88%E4%B8%8A%EF%BC%89/</guid>
      <pubDate>Thu, 27 Apr 2023 15:32:42 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;01&quot;&gt;&lt;a href=&quot;#01&quot; class=&quot;headerlink&quot; title=&quot;01&quot;&gt;&lt;/a&gt;01&lt;/h2&gt;&lt;p&gt;说到哲学好像是一个独立的大学术领域，其实关于人生哲学和每个人都息息相关，它就是一个个看上去有点宏大的问题，而每一个都应该主动去触达这些宏大的</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><p>说到哲学好像是一个独立的大学术领域，其实关于人生哲学和每个人都息息相关，它就是一个个看上去有点宏大的问题，而每一个都应该主动去触达这些宏大的问题，正是这些问题构成我们独特的人生哲学。</p><p>不知道你怎么看待这些宏大的问题，</p><ul><li>我活着有什么意义</li><li>我做的事情有什么意义</li><li>我此时此刻在追求什么</li><li>我是谁，什么构成了我</li></ul><br/><p>从我的观察来说，一部分人是完全拒绝或逃避这些问题，他们不去思考活着的意义 —— “问这种问题根本没意义好伐啦，钱不要赚的啊。”、“赶紧娶个老婆，好好工作赚钱，教育下一代要出息啊” 。显然，他们不会为这些宏大的问题苦恼，这些问题被他们归为了不需要思考的事情，我们接受了一种使命，并不加思索的执行着，也就是我们所说的 —— 麻木。</p><p>当然，也有一部分人积极且主动地持续探索着这些问题。在人生的路上，他们会不断地处于迷茫之中，在这迷茫之中是不断生长的内在力量。如果你想问我这内在力量是什么，我会在下面再展开探讨。或许你还会想问纠结于这些问题不就是陷入虚无主义吗？我可以非常肯定的告诉你，虚无主义是每一个拥有自由意志之人必经的课题。破解虚无的结论永远是具体，这是所有文化作品表达的永恒主题，但对于这个“具体”是每个人的课题。</p><p>是的，我非常粗暴地认为，如果你从未陷入和追问过虚无主义，你一定是麻木的，你在触达这个问题时选择了拒绝或逃避。确实，我承认有一些人很早就找到了具体的使命 —— 我们家族就是要继承这传统的手艺啊，如果没有经历过怀疑和迷茫到再认可的过程，也是一种彻头彻尾的麻木包装在了一件看似美好的事物里面。</p><p>综上，对于人生的宏大问题上，一些人彻底拒绝或逃避，一些人持续探索和追问，其实对于绝绝绝大多数人来说，包括我，我们在一些问题上逃避了、一些问题上拒绝了、一些问题上探索了一段路、一些问题上还在追求，我们的人生哲学很大，其实我们都已经在路上了。</p><br/><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><p>在那么多的宏大问题上，我认为有三个问题非常非常重要，我把它们成为关键问题</p><ol><li>我的价值观排序是怎么样的</li><li>我是谁</li><li>我爱哪些人，我不爱哪些人</li></ol><br/><p>价值观是个非常重要的问题，我几乎决定了我们此刻要做什么，我们未来会成为什么，说白了，你在追求什么。很多人的追求是被外界潜移默化植入的，这些追求的背后才是自我真正的诉求，但我们常常被植入这些“手段”，而意识不到自己的“目的”，错把手段当成目的的问题是，常常求而不得。</p><p>比如说，我们会追求美丽。每个月总要买点新衣服，发型和指甲都要精致一点，搭配要好看，定期也要做下医美养护，总之我得是相对美丽的。有些人花了很多时间投入在这个事情上，背后的诉求非常常见 —— 被看见，希望在自己在意的群体里被看见，因为他们眼里看见了同样美丽的女孩。但是我建议同样有这个追求的人重新审视一下你的环境，你身处的环境真的是这个评价标准吗？如果不是，做到这个程度的美丽真的有被看见吗？</p><p>我是说真的，大多数成年人的圈子只有一小撮人在意美丽，你在一个满地拖鞋的企业里美丽只会收获到敷衍夸赞。</p><p>而如果你在意的是遥远的圈子，比如网络之中，那份被看见的持续性是要下足够的成本投入的，并且这份被看见的自我认同是会从逐渐上瘾发展成逐渐淡化甚至麻木。一开始，点赞会让人感觉到被看见、被认可、被喜欢，但是观众眼里的你永远是片面的，你的照片是筛选过的，你的文字是生活的截取和夸张，你在逐渐地测试中发现，观众看见的也不是你，观众看见的是透过你他们心中的想象，最后发现，你最爱的还是数字，你被看见了，也是数字。—— 你认可数字的价值吗？</p><p>除了追求美丽，人们也常常追求金钱。金钱背后的诉求可能比较复杂，包含着希望被看见、被尊重、变得幸福、得到认可、取得优越感。同样的问题，当手段变成目的的时候，当不去探究和追问的时候，你会在某些时刻感到彻底的沮丧如果追求金钱是为了被尊重，那么为什么去做灰产？。如果追求金钱是为了幸福，那么35岁就一堆慢性病是怎么回事？如果追求金钱是为了取得认可，为什么要追风口？</p><p>这让我想到，现在有很多青年声称努力赚钱早点养老，但大部分人想象的养老一点都不具体 —— 回老家买个房，每天养养花草散步做点小生意。这就是某种围城，闲着没事干的羡慕有奋斗目标的，在奋斗的羡慕躺平的。</p><p>回到价值选择的问题上，这个问题包含我们追求什么，以及这些欲望的优先级。</p><p>就我的观点来说，我认为真正自我意识下的追求是可以付出生命的，如果不能投身于某个追求，那它可能还称不上追求，而是某种欲望和目标，它可能还需要时间探索和追问。我的意思是，为了达成这件事情，需要的话我可以付出生命，而这件事如果不再有延续的可能的话，生命的价值可能也就到此为止了。赖活不如好死，至少在自我追求充分明确之后是这样。</p><p>当然这件事并不容易，我是说值得付出生命的追求，小时候我脑瓜有很多决心可以付出生命的事情，但是随着长大它们显得荒谬了起来，欲望开始变得丰富多彩且模糊，时间开始变得有形状，开始明白观点和执念都是需要时间来发展的，坚定的信念背后是看见自己的诉求。</p><p>关于探索和追问的线索，从心理学领域可以给到一些支持，人们往往内心的诉求包括：安宁、快乐、幸福、金钱、名声、认可、权力、不幸、恐惧。这里有一些其实是重叠的，也有一些是完全互斥的。这里的每一个点都值得反复思考，它们大多数都是伪诉求。</p><br/><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><p>我是谁是一个庞大的问题，它包含了我如何看待我自己，我如何看待他人看待我，我扮演着什么身份，我所属于哪些群体。</p><p>这其实是一个很好的深度聊天话题，比起询问你的人生追求是什么，我想至少在 “用100字描述你是谁” “用1000字描述你是谁” 上每个人都是有话可说的。</p><p>人们未必对自己是谁有过充分地思考，但眼下每个人都有自己的答案，在回答这些问题的过程，是非常有可能意识到，你是冲突的，你是矛盾的。你可能觉得自己挺优秀，但你觉得别人好像没觉得你优秀，这中间有什么东西你明明是清楚的，但一直不肯去触碰，你用了另一种结论 —— “他们不懂” 否决了问题的存在。还有比如，你是什么身份，当你说出你是某某的妈妈时，你会不会对那个气愤自我消失的自己感到抱歉，还是非常庆幸这个身份。你会是很多个你，你想象中的你，你眼前镜子里的你，你想象中别人眼里的你，你感受中别人眼里的你，在这里的你，在那里的你，你应该看到那么多的你都存在着。</p><p>我常常在聊天中暗自惊叹人们的思维怎么会在同一时刻有这么多自相矛盾的盲区，也常常怀疑自己说出的话是不是也是如此。一个不太善于理性思考的人，在对于思考的表达上确实会显得不太聪明的样子；一个太善于理性思考的人，在对于思考的表达上又有着大量的跳跃。</p><p>我想有必要强调一下理性和感性的应用，我想把它们俩比作肌肉和筋膜，这是我从瑜伽习练中收获的感悟。你知道我们的身体能动起来是因为包裹着骨骼的肌肉，以及连接骨骼之间、骨骼肌肉之间、肌肉之间的筋膜（其实还包含一些其他的，请简化理解吧）。对于体式习练来说，肌肉是我们的力量，筋膜是我们的柔韧，习练中如果只有力量，体式是做不到位的，你的胯无法摆正，你举起的双手无法合掌；反而，习练中如果只有柔韧，体式是非常危险的，咔嚓一下做到那个位置，很容易发生不可逆损伤。</p><p>理性和感性也是如此，感性让人发散和探索，思维在头脑中爆炸，如果理性力量太少，那么思维的链路会非常的荒谬而不自知，就像体式强行到了一个位置还洋洋得意；而如果感性力量太少，那么思维会很僵化，它发展地很慢，甚至可能更认死理，就像一块肌肉就在这发力了，它愿意更强，但它不想再进一步和筋膜结合协同加深体式了。</p><p>我们关于人生哲学的思考，不得不意识到这样一个问题，你的思维模型某种程度上就决定了你人生哲学的深度，你不得不回归到锻炼你的感性思维和理性思维的结合运用中，就像习练瑜伽一样的修行，在不断的习练中找到空间并更近一步，这个空间就是自由意志。</p><p>关于我是谁这个问题还有一个子问题很重要，即你所归属的群体。没有人是完全孤独的，即使你感受到孤独。你认可的归属群体的排序，也辅助着你的价值排序。你可能认为你是某个家庭的一员、某个社区的一员、某个城市的一员、某个国家的一员，不管怎么说，你总归认可你是星系的一员吧？在我们明确我们是什么的一员，不是什么的一员，就能更建设性地看待我们所处的群体，不止是抱怨，如果你认可并希望这个群体变得更好，那么就应该参与建设，也更明白不同人的利益之下有根本问题存在。</p><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><p>以上仅代表个人观点，请保持独立思考。</p><br/><br/><br/><br/><br/>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%80%9D%E8%80%83/">思考</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/04/27/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E5%BA%94%E8%AF%A5%E6%9C%89%E7%82%B9%E4%BA%BA%E7%94%9F%E5%93%B2%E5%AD%A6%EF%BC%88%E4%B8%8A%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Github Copilot 实用上手指南</title>
      <link>https://blog.liluhui.cn/2023/04/12/github-copilot/</link>
      <guid>https://blog.liluhui.cn/2023/04/12/github-copilot/</guid>
      <pubDate>Wed, 12 Apr 2023 13:56:36 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;img src=&quot;https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/0</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/screenshot-20230408-174003.png" class=""><p>官网：<a href="https://github.com/features/copilot/">https://github.com/features/copilot/</a></p><p>GitHub Copilot 是一款由 GitHub 和 OpenAI 合作开发的人工智能编程助手，可以根据编写的代码，自动生成可能的代码补全、函数调用、甚至是整个函数或代码块。它的定位是为开发者提供一个更加高效的编程工具，能够降低编程的难度和疲劳感，提高编程的质量和效率。</p><br/><h2 id="GitHub-Copilot-的主要功能"><a href="#GitHub-Copilot-的主要功能" class="headerlink" title="GitHub Copilot 的主要功能"></a>GitHub Copilot 的主要功能</h2><ol><li><p>代码补全：GitHub Copilot 可以基于当前代码的上下文，智能地生成代码片段和语句，提供代码自动补全的功能，从而减少编写代码的时间和错误。</p></li><li><p>函数调用：GitHub Copilot 可以根据当前上下文中已经存在的变量和方法，智能地推测出可能需要调用的函数，从而减少程序员的思考时间和错误率。 </p></li><li><p>代码注释：GitHub Copilot 可以为代码自动生成注释，描述当前代码的功能和用途，从而帮助开发者更好地理解代码。</p></li><li><p>代码生成：GitHub Copilot 可以基于开发者提供的输入，自动生成完整的函数、代码块、甚至是整个程序。这使得开发者可以更快速地编写代码，减少手动编写代码的时间和劳动强度。</p></li></ol><br/><h2 id="GitHub-Copilot-的发展"><a href="#GitHub-Copilot-的发展" class="headerlink" title="GitHub Copilot 的发展"></a>GitHub Copilot 的发展</h2><p>早在 2019 年，OpenAI 就推出了名为 GPT-2 的自然语言处理模型，该模型能够生成高质量的自然语言文本。这个模型的出现引起了极大的关注，并被许多人认为是人工智能技术的重要进展之一。</p><p>随着 GPT-2 的出现，人们开始想象将这种技术应用于编程中的可能性。GitHub Copilot 就是基于这个想法产生的。GitHub Copilot 的核心技术是使用 OpenAI Codex 技术开发的，它是 GPT-3 的后继者，专门针对编程任务进行了优化和训练。Codex 可以解析自然语言，并根据用户的输入生成代码建议，这些建议可以在一定程度上帮助程序员更快速、更高效地编写代码。</p><p>在 GitHub Copilot 发布之前，一些类似的编程助手工具已经出现了，例如 TabNine 和 Kite 等。然而，这些工具都是基于固定的代码模板和规则，不能像 GitHub Copilot 那样通过机器学习自我进化，并生成更加智能和个性化的代码建议。</p><p>2021 年 6 月，GitHub Copilot 推出技术预览版，该版本仅向早期用户提供了访问权限。<br>2022 年 6 月，GitHub Copilot 正式发布，向个人开发者提供订阅服务。<br>2023 年 3 月，GitHub Copilot X 推出技术预览版，带来一系列由 GPT4 驱动的新能力。</p><p>GitHub Copilot 的工作方式是基于机器学习和人工智能技术。它使用了深度学习算法和大规模的预训练模型，通过学习程序员的编程习惯和语法结构，从而能够智能地生成代码片段和完整的代码。开发者可以通过安装 GitHub Copilot 插件来使用该工具，并在编辑器中与其进行交互。在使用的过程中，GitHub Copilot 还会不断地学习和优化自己的模型，以提供更好的编程辅助功能。</p><br/><h1 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h1><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>定位：智能的开发者伙伴 （Copilot）<br>愿景：通过使用人工智能技术来提供更高效、更精准的编码工具，以帮助开发人员解决更具挑战性的问题，提高开发效率和质量，从而能够专注于解决更创造性和高层次的问题。</p><p>其<strong>智能</strong>体现在以下方面：</p><ol><li>语言理解能力：它可以解析自然语言输入并理解编程上下文，从而生成合适的代码片段。</li><li>编程知识库：GitHub Copilot 能够访问广泛的编程知识库，包括 GitHub 上的代码仓库、Stack Overflow 等，以帮助生成更加准确的代码。</li><li>提供多种生成代码方式：除了提供基于自然语言的描述生成代码的方式，GitHub Copilot 还支持代码的自动补全、重构和错误修复等多种方式，这使得它在实际开发中的适用性更强。</li><li>模型训练：GitHub Copilot 的底层模型是通过大量的数据和算法训练得到的，这使得它能够生成准确的代码片段，并逐步提高自己的表现。</li><li>上下文理解：GitHub Copilot 能够根据代码上下文推断出程序员的意图，并生成相应的代码。</li><li>集成开发环境（IDE）：GitHub Copilot 集成了多种常用的 IDE，可以在代码编辑器中直接使用，从而提高编程效率。</li><li>多语言支持：GitHub Copilot 支持多种编程语言，如JavaScript、TypeScript、Python、Ruby等，这也使得它在跨平台、多语言编程方面具有优势。</li><li>自我学习能力：GitHub Copilot 不断从海量代码库中学习和积累知识，同时也可以根据用户的反馈进行调整和优化，这使得它的智能水平不断提高，也能够更好地满足用户的需求。</li><li>开放性和可定制性：GitHub Copilot 是一个开放的平台，用户可以自行添加自己的代码库和知识库，并且可以根据自己的需求进行定制和调整，这也使得它具有较高的可扩展性和灵活性。</li></ol><p><strong>对于我们来说，需要了解</strong></p><ol><li><strong>Copilot 背后的训练集来自于 Github 上广泛且大量的代码</strong></li><li><strong>Copilot 会学习当前项目代码，参考本地和公共领域的代码来理解上下文</strong></li><li><strong>Copilot 本质上依然是自然语言模型，可以使用自然语言描述问题</strong></li></ol><br/><h2 id="案例展示"><a href="#案例展示" class="headerlink" title="案例展示"></a>案例展示</h2><ol><li>将注释转换为代码</li></ol><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/212965036-26579d9f-cfaf-44eb-90fb-76421dc7ab9d.gif" class="" width="600"><ol start="2"><li>创建单元测试</li></ol><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/212964557-8d832278-61bb-4288-a8a7-47f35859e868.gif" class="" width="600"><ol start="3"><li>创建 SQL 查询</li></ol><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/212965203-c9623e27-4fff-4961-a7f4-4d14625dd17c.gif" class="" width="600"><br/><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li>注册服务 <a href="https://github.com/settings/copilot">https://github.com/settings/copilot</a> ，目前 10刀&#x2F;月<img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410210259.png" class="left" width="300"></li></ol><br/><ol start="2"><li>下载你使用的<a href="https://docs.github.com/en/copilot/getting-started-with-github-copilot?tool=visualstudio"> IDE 对应的插件</a>，目前支持 VSCode、Visual Studio、JetBrains、Neovim，以下以我用的 VSCode 为例<img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410210312.png" class="left"></li></ol><br/><ol start="3"><li>安装IDE插件，其中 <a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot">Github Copiot</a> 为正式版，<a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-nightly">GitHub Copilot Nightly</a> 为 Beta 版，<a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-labs">GitHub Copilot Labs</a> 更多实验室功能（其实就是 Chat 的可视化版本）<img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410210043.png" class="left" width="300"></li></ol><br/><ol start="4"><li>进 IDE 授权登录<img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410210107.png" class="left" width="300"></li></ol><br/><ol start="5"><li>随便打开一个文件进行验证<img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410210154.png" class="left"></li></ol><br/><h3 id="操作技巧分享"><a href="#操作技巧分享" class="headerlink" title="操作技巧分享"></a>操作技巧分享</h3><h3 id="常用场景：根据注释写代码"><a href="#常用场景：根据注释写代码" class="headerlink" title="常用场景：根据注释写代码"></a>常用场景：根据注释写代码</h3><p>以下内容，用时 5 秒，还包括了我的优化建议</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410220406.png" class="left"><br/><h3 id="常用场景：重复性内容生成"><a href="#常用场景：重复性内容生成" class="headerlink" title="常用场景：重复性内容生成"></a>常用场景：重复性内容生成</h3><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410220052.png" class="left"><p>以上是一段需要注册一堆移动操作的处理，涉及大概16个操作，而项目中其实真的有大量这样的事情在发生，不单是是测试用例，业务中就存在一些重复了又不完全重复的事情。<br>以为自己复制和改变量花费时间不多，实际上这就是每一个3秒到1秒的提升，量越多，这一提效越明显。</p><br/><h3 id="常用场景：总是翻文档不够熟悉的-SQL-amp-RegExp"><a href="#常用场景：总是翻文档不够熟悉的-SQL-amp-RegExp" class="headerlink" title="常用场景：总是翻文档不够熟悉的 SQL &amp; RegExp"></a>常用场景：总是翻文档不够熟悉的 SQL &amp; RegExp</h3><p>除了数据工程师应该没有人在天天写 SQL 吧，写到复杂一点的逻辑总是要翻文档和测试的，只要你有了小助手，并且拥有描述需求和测试 SQL 的能力，整个过程会非常高校。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410221835.png" class="left"><br/><p>正则也是一样，用到深处方恨学得不精，业务里总会来一些匹配需求的花活。</p> <img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230408172136.png" class="left"><br/><p>从这些能力来来看，<br><strong>研发的关键能力在于描述清楚需求和调优的能力。你依然也必须是主控。</strong></p><br/><h3 id="操作技巧：一次查看更多建议"><a href="#操作技巧：一次查看更多建议" class="headerlink" title="操作技巧：一次查看更多建议"></a>操作技巧：一次查看更多建议</h3><p>鼠标聚焦在建议行上，键盘 <code>ctrl + entry</code> 触发打开其他建议，可以一次性浏览当前上下文背后的内容。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410213753.png" class="left"><p>其他常用</p><ul><li>切换下一个建议 <code>Alt + ]</code></li><li>催促生成建议 <code>Alt + \</code></li></ul><br/><h3 id="操作技巧：解释代码"><a href="#操作技巧：解释代码" class="headerlink" title="操作技巧：解释代码"></a>操作技巧：解释代码</h3><p>利用左侧的 lab 工具可以选择 <code>EXPLAIN CODE</code>, 同时在编辑器中一样可以使用</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410233355.png" class="left"><br/><h3 id="操作技巧：提问机"><a href="#操作技巧：提问机" class="headerlink" title="操作技巧：提问机"></a>操作技巧：提问机</h3><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410211718.png" class="left"><p>根据官方博客的说明，copilot 是完全针对代码的，所以其他事情他基本上一概不知，正确用法当然是回到我们的本职工作。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410213208.png" class="left"><p>实测不用 <code>q:</code> 也可以，但这是从官方开发者那边学来的技巧，<code>q:</code> 准确触发提问而不是代码编写。</p> <img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230408171638.png" class="left"><p>进一步接地气就选中文资料，好用无负担</p><br/><h3 id="操作技巧：禁止提示"><a href="#操作技巧：禁止提示" class="headerlink" title="操作技巧：禁止提示"></a>操作技巧：禁止提示</h3><p>某些历史包袱文件可能过于庞大，使用上可能会感觉到建议都在瞎扯，可以在编辑器右下角点击关闭代码协助提示。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410211411.png" class="left"><p>也可以在编辑器 <code>Settings.json</code> 文件中进行配置，比如把用于写各种配置信息的文件类型禁止分析</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.inlineSuggest.enabled&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;github.copilot.enable&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;*&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;yaml&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;plaintext&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;markdown&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;javascript&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;python&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br/><h1 id="隐私纠纷-amp-代码安全"><a href="#隐私纠纷-amp-代码安全" class="headerlink" title="隐私纠纷&amp;代码安全"></a>隐私纠纷&amp;代码安全</h1><p>GitHub Copilot的隐私问题一直备受关注。2021年7月，OpenAI 和 GitHub 发布了一份联合声明，承诺对用户的隐私和数据安全进行保护，并明确了 Copilot 在开发过程中使用的数据来源和数据处理方法。声明还指出，Copilot 会收集用户的输入和代码，以及用于训练模型的代码存储库的元数据和代码片段，但不会存储完整的代码存储库或私人代码。同时，声明还指出用户可以选择退出使用 Copilot，并在使用过程中保持完全控制权。</p><p>然而，仍有一些人对 Copilot 的隐私问题表示担忧。他们认为，Copilot 使用的训练数据可能包含用户的私人代码，Copilot的代码生成算法可能会泄露用户的商业机密或知识产权。此外，一些专家也指出，Copilot生成的代码可能会存在安全漏洞和编程错误，从而导致数据泄露或系统崩溃等问题。因此，他们呼吁 OpenAI 和 GitHub 加强隐私保护措施，并建立更加透明和安全的用户数据管理机制。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230409174225.png" class="left"><br/><br/><p>建议在 <a href="https://github.com/settings/copilot">Github 个人设置</a>中，建议对隐私授权进行设置，把允许使用你的代码片段作为训练取消。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/2023/04/12/Pasted%20image%2020230410211050.png" class="left"><p>2022年在 IEEE 安全与隐私研讨会上发表的<a href="https://arxiv.org/abs/2108.09293">一篇论文评估了 Copilot 生成的代码的安全性</a>，这些代码是 MITRE 在 89 个不同场景和 1689 个程序中列举的 25 个最大的代码弱点(例如跨网站脚本、路径遍历)。这是围绕<strong>弱点的多样性</strong>(它对可能导致各种代码弱点的场景的响应能力) ，<strong>提示的多样性</strong>(它对相同代码弱点的微妙变化的响应能力)和<strong>域的多样性</strong>(它在 Verilog 中生成寄存器传输级硬件规范的能力)的评估报告。研究发现，在多种语言中，39.33% 的顶级建议和 40.73% 的总建议导致了代码漏洞。</p><br/><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>同类产品 <a href="https://www.zhihu.com/question/590152131">Cursor</a>，为 OpenAI 旗下研发，考虑与微软的深度结合，更多高阶能力未来应该会在 Github Copilot 透出。目前 Cursor 已经从 GPT4 降级到了 GPT3，并且也开始收费了。</p><p>Github Copilot X 的<a href="https://www.youtube.com/watch?v=4RfD5JiXt3A">宣传片</a>其<a href="https://github.com/features/preview/copilot-x">官网</a>中透露其新功能包括加入聊天工具 Copilot Chat、PR生成和智能处理工具 Copilot for Pull Request、智能终端工具 Copilot CLI、智能文档工具 Copilot Doc、语音生成代码工具 Copilot Voice … 非常期待！</p><br/><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以合作和开放的心态去使用 AI，AI 依然不是万能的，但它已经称得上是“好用”的。多探索、多打磨自己的助手，不要成为被动接受趋势浪尾的人。</p><p>倾听更多的声音：<a href="https://www.zhihu.com/question/470873369">https://www.zhihu.com/question/470873369</a></p><br/><br/><br/><br/><br/>]]></content:encoded>
      
      
      
      
      <comments>https://blog.liluhui.cn/2023/04/12/github-copilot/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Shader入门-07</title>
      <link>https://blog.liluhui.cn/2023/03/31/Shader%E5%85%A5%E9%97%A807/</link>
      <guid>https://blog.liluhui.cn/2023/03/31/Shader%E5%85%A5%E9%97%A807/</guid>
      <pubDate>Fri, 31 Mar 2023 15:11:51 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近项目太忙了，一个练习拼拼凑凑时间花了三天，不算满意，但总归完成了一版。加上这个练习在 _WorldSpaceLightPos0 获取不到</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近项目太忙了，一个练习拼拼凑凑时间花了三天，不算满意，但总归完成了一版。加上这个练习在 _WorldSpaceLightPos0 获取不到上卡了一两个小时，整个人就有些烦躁，结果还是在放弃解决的时候发现是 untiy 设置的问题，有时候思路在一条路上走到黑了就逐渐疯狂 .. </p><p>花了很多时间在找图上，可视化的描述太重要了，但找来图也很难保持风格一致，总归看得不太舒服。</p><br/><p>写完我从头看了下，前置的基础知识还包括线性代数基础，不然不好理解“点积”是做什么的，另外还有对于法向量的理解。</p><p>我把粗暴的结论写在这，当然这些基础概念我相信看文章的小伙伴不懂一定会动手搜索的 : )</p><ul><li>点积是两个向量的夹角余弦值乘以它们的长度之积，在这个练习中因为都做了归一化处理你可以当作就是 cosθ 。</li><li>法向量是垂直于当前平面的单位向量。</li></ul><br/><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>实现一版最基础的光照模型，包括环境光、表面漫反射、表面镜面反射。</p><p>👉<a href="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/video/20230331/Unity_1qwLuTMcKz_x264.mp4">展示备份（国内节点）</a><br>👇效果展示（科学上网）</p><div class="video-container"><iframe src="https://www.youtube.com/embed/yjb1mZsPEFY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><br/><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Shader</span> <span class="string">&quot;Unlit/AloeaShader07&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">Properties</span> &#123;</span><br><span class="line">        _MainTex (<span class="string">&quot;Texture&quot;</span>, 2D) = <span class="string">&quot;white&quot;</span> &#123;&#125;</span><br><span class="line">        _Gloss (<span class="string">&quot;Gloss&quot;</span>, <span class="title class_">Range</span>(<span class="number">1</span>,<span class="number">100</span>)) = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="title class_">SubShader</span> &#123;</span><br><span class="line">        <span class="title class_">Tags</span> &#123; <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Opaque&quot;</span> <span class="string">&quot;Queue&quot;</span>=<span class="string">&quot;Geometry&quot;</span> &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="title class_">Pass</span> &#123;</span><br><span class="line">            <span class="variable constant_">CGPROGRAM</span></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include <span class="string">&quot;UnityCG.cginc&quot;</span></span><br><span class="line">            #include <span class="string">&quot;Lighting.cginc&quot;</span></span><br><span class="line">            #include <span class="string">&quot;AutoLight.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            struct <span class="title class_">MeshData</span> &#123;</span><br><span class="line">                float4 vertex : <span class="variable constant_">POSITION</span>;</span><br><span class="line">                float3 normal : <span class="variable constant_">NORMAL</span>;</span><br><span class="line">                float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct <span class="title class_">Interpolators</span> &#123;</span><br><span class="line">                float4 vertex : <span class="variable constant_">SV_POSITION</span>;</span><br><span class="line">                float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">                float3 normal : <span class="title class_">TEXCOORD1</span>;</span><br><span class="line">                float3 worldPos : <span class="title class_">TEXCOORD2</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            float _Gloss;</span><br><span class="line"></span><br><span class="line">            <span class="title class_">Interpolators</span> vert (<span class="title class_">MeshData</span> v) &#123;</span><br><span class="line">                <span class="title class_">Interpolators</span> o;</span><br><span class="line">                o.<span class="property">vertex</span> = <span class="title class_">UnityObjectToClipPos</span>(v.<span class="property">vertex</span>);</span><br><span class="line">                o.<span class="property">uv</span> = <span class="title function_">TRANSFORM_TEX</span>(v.<span class="property">uv</span>, _MainTex);</span><br><span class="line">                o.<span class="property">normal</span> = <span class="title class_">UnityObjectToWorldNormal</span>( v.<span class="property">normal</span> );</span><br><span class="line">                o.<span class="property">worldPos</span> = <span class="title function_">mul</span>( unity_ObjectToWorld, v.<span class="property">vertex</span> ).<span class="property">xyz</span>;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            float4 frag (<span class="title class_">Interpolators</span> i) : SV_Target &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 环境光</span></span><br><span class="line">                float ambient = unity_AmbientSky.<span class="property">w</span>;</span><br><span class="line">  </span><br><span class="line">                <span class="comment">// 漫反射</span></span><br><span class="line">                float3 L = _WorldSpaceLightPos0.<span class="property">xyz</span>;</span><br><span class="line">                float3 N = <span class="title function_">normalize</span>(i.<span class="property">normal</span>);</span><br><span class="line">                float3 diffuse = <span class="title function_">max</span>(<span class="number">0</span>, <span class="title function_">dot</span>(L, N));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 镜面反射</span></span><br><span class="line">                float3 V = <span class="title function_">normalize</span>(_WorldSpaceCameraPos - i.<span class="property">worldPos</span>);</span><br><span class="line">                float3 H = <span class="title function_">normalize</span>(L + V);</span><br><span class="line">                float3 specular = <span class="title function_">max</span>(<span class="number">0</span>, <span class="title function_">dot</span>(H, N));</span><br><span class="line">                specular = <span class="title function_">pow</span>(specular, _Gloss);</span><br><span class="line">  </span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">float4</span>( (ambient + specular + diffuse) * _LightColor0.<span class="property">xyz</span> * <span class="title function_">tex2D</span>(_MainTex, i.<span class="property">uv</span>) , <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable constant_">ENDCG</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h2 id="效果调试"><a href="#效果调试" class="headerlink" title="效果调试"></a>效果调试</h2><p><strong>重要说明：</strong><br><strong>1. 请先看完下面知识点部分的【光照模型】</strong><br><strong>2. 本次练习的重点就是把光照模型的计算再写一遍</strong></p><br/><p>步骤一：<br>计算散射光 diffuse</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">float4 frag (<span class="title class_">Interpolators</span> i) : SV_Target &#123;</span><br><span class="line">    <span class="comment">// _WorldSpaceLightPos0 获取到场景内第一个平行光的单位矢量（方向）。</span></span><br><span class="line">    <span class="comment">// _WorldSpaceLightPos0 这个名字有点迷惑，由于平行光是无限远的，这里给的始终是单位向量，当作方向使用</span></span><br><span class="line">    float3 L = _WorldSpaceLightPos0.<span class="property">xyz</span>;</span><br><span class="line">    <span class="comment">// 世界空间下的法向量 （怎么转化的回顾下 [练习4]）。</span></span><br><span class="line">    float3 N = <span class="title function_">normalize</span>(i.<span class="property">normal</span>);</span><br><span class="line">    <span class="comment">// 计算散射光：取入射光线 L 和 当前点的法向量 N 的点积，方向相反时会得到负数，需要处理范围至 [0, 1]。</span></span><br><span class="line">    float3 diffuse = <span class="title function_">max</span>(<span class="number">0</span>, <span class="title function_">dot</span>(L, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">float4</span>(diffuse, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230331/Pasted%20image%2020230330233802.png" class=""><br/><p>步骤二：<br>计算镜面反射光 specular</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> float4 frag (<span class="title class_">Interpolators</span> i) : SV_Target &#123;</span><br><span class="line">    <span class="comment">// 世界空间下的法向量</span></span><br><span class="line">    float3 N = <span class="title function_">normalize</span>(i.<span class="property">normal</span>);</span><br><span class="line">    <span class="comment">// 计算相机方向向量</span></span><br><span class="line">    <span class="comment">// _WorldSpaceCameraPos 是相机在世界空间下的位置，worldPos 是当前顶点在世界空间下的位置</span></span><br><span class="line">    float3 V = <span class="title function_">normalize</span>(_WorldSpaceCameraPos - i.<span class="property">worldPos</span>);</span><br><span class="line">    <span class="comment">// 计算 blinn phone 模型中的中间向量 H</span></span><br><span class="line">    float3 H = <span class="title function_">normalize</span>(L + V);</span><br><span class="line">    <span class="comment">// 计算反射光：取 中间向量 H 和 顶点法向量 N 的点积，限制数值范围在 [0,1]</span></span><br><span class="line">    float3 specular = <span class="title function_">max</span>(<span class="number">0</span>, <span class="title function_">dot</span>(H, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">float4</span>(specular, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230331/Pasted%20image%2020230330234549.png" class=""><br/><p>步骤三：<br>接入光泽度 _Gloss，测试反射光的面积和亮度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> float4 frag (<span class="title class_">Interpolators</span> i) : SV_Target &#123;</span><br><span class="line">    float3 N = <span class="title function_">normalize</span>(i.<span class="property">normal</span>);</span><br><span class="line">    float3 V = <span class="title function_">normalize</span>(_WorldSpaceCameraPos - i.<span class="property">worldPos</span>);</span><br><span class="line">    float3 H = <span class="title function_">normalize</span>(L + V);</span><br><span class="line">    float3 specular = <span class="title function_">max</span>(<span class="number">0</span>, <span class="title function_">dot</span>(H, N));</span><br><span class="line">    <span class="comment">// 接入参数 _Gloss</span></span><br><span class="line">    specular = <span class="title function_">pow</span>(specular, _Gloss);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">float4</span>(specular, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230331/Pasted%20image%2020230330234739.png" class=""><br/><p>步骤四：<br>最后接入环境光、材质的纹理、光照的颜色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> float4 frag (<span class="title class_">Interpolators</span> i) : SV_Target &#123;</span><br><span class="line">    float ambient = unity_AmbientSky.<span class="property">w</span>;</span><br><span class="line">    float3 N = <span class="title function_">normalize</span>(i.<span class="property">normal</span>);</span><br><span class="line">    float3 V = <span class="title function_">normalize</span>(_WorldSpaceCameraPos - i.<span class="property">worldPos</span>);</span><br><span class="line">    float3 H = <span class="title function_">normalize</span>(L + V);</span><br><span class="line">    float3 specular = <span class="title function_">max</span>(<span class="number">0</span>, <span class="title function_">dot</span>(H, N));</span><br><span class="line">    specular = <span class="title function_">pow</span>(specular, _Gloss);</span><br><span class="line">    <span class="comment">// 表面的光照强度等于 ambient + specular + diffuse</span></span><br><span class="line">    <span class="comment">// 接入光照颜色 _LightColor0.xyz、材质纹理 tex2D(_MainTex, i.uv)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">float4</span>( (ambient + specular + diffuse) * _LightColor0.<span class="property">xyz</span> * <span class="title function_">tex2D</span>(_MainTex, i.<span class="property">uv</span>) , <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230331/Pasted%20image%2020230331215529.png" class=""><br/><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="光照模型-Lambert"><a href="#光照模型-Lambert" class="headerlink" title="光照模型 - Lambert"></a>光照模型 - Lambert</h3><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230331/Pasted%20image%2020230331203228.png" class="left" width="300"><br/><p>先借由这张图回顾下物理世界中一个物体对于光是如何反应的。</p><p>在任何一个环境场内，假设有一束无限远的方向光，那么首先在球体朝向光的那一半面积是会被照亮的，而另一半是不会被这束光直接照亮的。</p><p>同时，取决于我们的观测位置、球体表面的光泽度、方向光的强度，我们会看到表面尤其高亮的一块光斑。</p><p>与此同时，方向光在环境中其他物体&#x2F;墙壁上反射出的光线也会照亮球体，让一部分在背光处的面被照亮。</p><br/><br/><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230331/Pasted%20image%2020230331220738.png" class="left" width="300"><br/><p>我们首先来进入一下漫反射的部分，也就是经典的 Lambert 光照模型。</p><p>已知物理世界是没有绝对光滑的表面的，任何表面由于凹凸不平会出现各个方向的反射，而 Lambert 光照假设表面对所有入射光线具有相同的反射率，那么表面每个点上漫反射的光照强度只取决于入射光的角度和法线的夹角。</p><p>其公式为  <code>DiffuseLight = Kd * I * max( dot(N,L) )</code> </p><p>其中 <code>dot(N,L)</code> 得到法线和入射光夹角的余弦，<code>I</code> 是入射光的强度即 Intensity，<code>Kd</code> 为表面的漫反射系数。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230331/Pasted%20image%2020230331214629.png" class="left" width="300"><br/><h3 id="光照模型-—-Phong-Lighting"><a href="#光照模型-—-Phong-Lighting" class="headerlink" title="光照模型 — Phong Lighting"></a>光照模型 — Phong Lighting</h3><p>最基础的光照模型 Phong Lighting 将物体表面的反射光分为漫反射光和镜面反射两个部分，其中漫反射我们在上面的 Lambert Lighting 中已经了解过，而镜面反射，也就是视觉效果上的高亮效果，取决于入射光线反射后与视线方向的角度。</p><p>参考下图，入射光线 L 对应当前表面法向量 N 上反射出光线 R，当视线 V 的方向和 R 重叠时，高亮是最为强的，当 V 和 R 的夹角越大，观察到的镜面反射的效果则越弱。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230331/Pasted%20image%2020230331223545.png" class="left" width="300"><br/><p>其实这个模型非常的简单，所有公式也很干净。</p><p>其公式为 <code>max(0, dot(V,R))</code></p><p>其中 V 是视线向量，R 是光线反射向量。</p><br/><h3 id="光照模型-—-Blinn-Phong-Lighting"><a href="#光照模型-—-Blinn-Phong-Lighting" class="headerlink" title="光照模型 — Blinn Phong Lighting"></a>光照模型 — Blinn Phong Lighting</h3><p>整体上和 Phone Lighting 是接近的，差别是 Blinn-Phone 模型在镜面反射光照的计算中不依赖反射光线向量 R 了，而是使用一个所谓的中间向量 H。</p><p>其公式为 <code>pow(max(0, dot(L, H)), Gloss)</code></p><p>其中 H 等于 <code>(L + V)/(|| L + V ||)</code> 也就是入射光线 L 和视线方向 V 的中间单位向量。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230331/Pasted%20image%2020230331223608.png" class="left" width="300"><br/><p>从效率上来讲，当视线和光线都距离表面无限远的时候，H 这个中间向量几乎就是常量，而 Phone 模型下则仍需要计算每一个点的反射光线。</p><p>从效果上来说，在 Phone Lighting 的方式中，对于一个平面来说镜面反射总是圆形的，而采用 Blinn Phong Lighting 后从一些角度看则是椭圆形的，像在太阳靠近地平面这样的场景下就要更真实。</p><br/><p>Phone Light 的反射高亮</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230331/Unity_INOKOLN2FY.gif" class=""><p>Blinn Phone Light 的反射高亮</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230331/Unity_K4B4WmFZyS.gif" class=""><br/><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天的练习中主要涉及了环境光+漫反射光+镜面反射光组合的基础光照模型。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230331/Pasted%20image%2020230331205548.png" class=""><p>在光照模型领域，还有其他很有意思的光照计算方式。比如说变体的 <code>Half-Lambert</code> , 在表面较暗的区域带来更多光照，整体散射过渡更加光滑一些；还有 <code>Banded-Lighting</code> 让光照像波段一样阶梯型变化；<code>Minnaert Lighting</code> 模型特别适合用于凹凸不平的表面，那些有大量反向散射的表面，比如月亮、地毯；还有像 <code>Oren-Nayer Lighting</code> 这种基于半角向量的漫反射模型，来模拟更粗糙表面的效果… </p><p>看来，很适合把这批都练手一下呢 : ）</p><p>最后的最后，还是需要再次说明一下，图形学的光照模型都是一种数学上的近似模拟，而不是真实世界的表达。 —— 你怎么放飞想象都可以，但不要指着真太阳说它渲染得真细腻。</p><br/><br/><br/><br/><br/>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%B8%B2%E6%9F%93/">渲染</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/03/31/Shader%E5%85%A5%E9%97%A807/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Shader入门-06</title>
      <link>https://blog.liluhui.cn/2023/03/27/Shader%E5%85%A5%E9%97%A806/</link>
      <guid>https://blog.liluhui.cn/2023/03/27/Shader%E5%85%A5%E9%97%A806/</guid>
      <pubDate>Mon, 27 Mar 2023 12:24:45 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;来上点难度 💪&lt;br&gt;想不清楚就写写画画，没有什么比写下来更让人思路清晰了&lt;/p&gt;
&lt;br/&gt;

&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>来上点难度 💪<br>想不清楚就写写画画，没有什么比写下来更让人思路清晰了</p><br/><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>圆角边框效果，支持改变边框的颜色、粗细、曲度</p><p>👉<a href="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/video/20230327/Unity_5upLQWaRXm_x264.mp4">展示备份（国内节点）</a><br>👇效果展示（科学上网）</p><div class="video-container"><iframe src="https://www.youtube.com/embed/96msKY_3n_4" frameborder="0" loading="lazy" allowfullscreen></iframe></div><br/><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Shader</span> <span class="string">&quot;Unlit/AloeaShader06&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">Properties</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Radius (<span class="string">&quot;BorderRadius&quot;</span>, <span class="title class_">Range</span>(<span class="number">0.01</span>, <span class="number">1</span>)) = <span class="number">0.1</span></span><br><span class="line">        _Border (<span class="string">&quot;BorderWidth&quot;</span>, <span class="title class_">Range</span>(<span class="number">0</span>, <span class="number">1</span>)) = <span class="number">0.1</span></span><br><span class="line">        _Color (<span class="string">&quot;BorderColor&quot;</span>, <span class="title class_">Color</span>) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">SubShader</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">Tags</span> &#123; <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Opaque&quot;</span> &#125;</span><br><span class="line">        <span class="variable constant_">LOD</span> <span class="number">100</span></span><br><span class="line">  </span><br><span class="line">        <span class="title class_">Pass</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable constant_">CGPROGRAM</span></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">  </span><br><span class="line">            #include <span class="string">&quot;UnityCG.cginc&quot;</span></span><br><span class="line">  </span><br><span class="line">            float _Radius;</span><br><span class="line">            float _Border;</span><br><span class="line">            float4 _Color;</span><br><span class="line">  </span><br><span class="line">            struct appdata</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : <span class="variable constant_">POSITION</span>;</span><br><span class="line">                float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">  </span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">                float4 vertex : <span class="variable constant_">SV_POSITION</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">  </span><br><span class="line">            v2f vert (appdata v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.<span class="property">vertex</span> = <span class="title class_">UnityObjectToClipPos</span>(v.<span class="property">vertex</span>);</span><br><span class="line">                o.<span class="property">uv</span> = v.<span class="property">uv</span>;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">            fixed4 frag (v2f i) : SV_Target</span><br><span class="line">            &#123;  </span><br><span class="line">                float split = <span class="number">1</span> / _Radius;</span><br><span class="line">                float2 coords = i.<span class="property">uv</span>;</span><br><span class="line">                coords.<span class="property">x</span> *= split;</span><br><span class="line">                float2 pointOnLineSeg = <span class="title function_">float2</span>( <span class="title function_">clamp</span>(coords.<span class="property">x</span>, <span class="number">0.5</span>, split - <span class="number">0.5</span>), <span class="number">0.5</span> ); <span class="comment">// 中心线</span></span><br><span class="line">                float sdf = <span class="title function_">distance</span>(coords, pointOnLineSeg) * <span class="number">2</span> ; <span class="comment">// 所有点距离中心线距离</span></span><br><span class="line">                <span class="title function_">clip</span>(- (sdf - <span class="number">1</span>)); <span class="comment">// 裁剪</span></span><br><span class="line">                float borderSdf = sdf + _Border;</span><br><span class="line">                float pd = <span class="title function_">fwidth</span>(borderSdf);</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">saturate</span>((borderSdf - <span class="number">1</span>) / pd )* _Color;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable constant_">ENDCG</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><h2 id="效果调试"><a href="#效果调试" class="headerlink" title="效果调试"></a>效果调试</h2><p>整体思路</p><ol><li>裁剪掉半径外的部分</li><li>找到平面的一条中线，按照所有点到中线距离超过半径r1来算出需要裁掉的部分</li><li>在上一步的基础上，再减去一个内层半径r2的图形，得到圆角边框</li></ol><br/><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230327/Pasted%20image%2020230326162955.png" class=""><br/><p>步骤一：<br>画出中线，假设矩形均分为 6 段，第一段和最后一段是画圆角的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    float2 coords = i.<span class="property">uv</span>;</span><br><span class="line">    <span class="comment">// 坐标 x 的范围从 [0,1] 改为 [0,6]，划分为 6 段</span></span><br><span class="line">    coords.<span class="property">x</span> *= <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 中线的 x 范围通过 clamp 函数限制在 [0.5,5.5]，y 则始终为 0.5</span></span><br><span class="line">    float2 pointOnLineSeg = <span class="title function_">float2</span>( <span class="title function_">clamp</span>(coords.<span class="property">x</span>, <span class="number">0.5</span>, <span class="number">5.5</span>), <span class="number">0.5</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230327/Pasted%20image%2020230326154136.png" class=""><br/><p>步骤二：<br>算出 uv 上所有点到中线的距离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;  </span><br><span class="line">float2 coords = i.<span class="property">uv</span>;</span><br><span class="line">coords.<span class="property">x</span> *= <span class="number">6</span>;</span><br><span class="line">float2 pointOnLineSeg = <span class="title function_">float2</span>( <span class="title function_">clamp</span>(coords.<span class="property">x</span>, <span class="number">0.5</span>, <span class="number">5.5</span>), <span class="number">0.5</span>);</span><br><span class="line"><span class="comment">// distance 函数算两个向量的距离</span></span><br><span class="line">float sdf = <span class="title function_">distance</span>(coords, pointOnLineSeg);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">float4</span>(sdf.<span class="property">xxx</span>, <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这个时候圆角内的点到中线的距离数值范围在 [0, 0.5],  超出的部分最大达到  √ (0.5^2 + 0.5^2)。我们的目标就是裁剪掉这个部分。 </p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230327/Pasted%20image%2020230326155127.png" class=""><br/><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把 sdf 乘以 2，数值范围改到 [0,1] 更方便操作和观察</span></span><br><span class="line">float sdf = <span class="title function_">distance</span>(coords, pointOnLineSeg) * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>如下图，更清楚地观察我们要裁剪的部分（纯白色，大于1的部分）</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230327/Pasted%20image%2020230326155555.png" class=""><br/><p>步骤三：<br>裁剪掉圆角外侧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;  </span><br><span class="line">float2 coords = i.<span class="property">uv</span>;</span><br><span class="line">coords.<span class="property">x</span> *= <span class="number">6</span>;</span><br><span class="line">float2 pointOnLineSeg = <span class="title function_">float2</span>( <span class="title function_">clamp</span>(coords.<span class="property">x</span>, <span class="number">0.5</span>, <span class="number">5.5</span>), <span class="number">0.5</span>);</span><br><span class="line">float sdf = <span class="title function_">distance</span>(coords, pointOnLineSeg) * <span class="number">2</span>;</span><br><span class="line"><span class="comment">// clip 会丢弃小于 0 的部分，因为目前圆角内所有点的 sdf 为 [0,1]</span></span><br><span class="line"><span class="title function_">clip</span>(sdf - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">float4</span>(sdf.<span class="property">xxx</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230327/Pasted%20image%2020230326160211.png" class=""><br/><p>ok，能看到准确得裁剪出来了。<code>sdf - 1</code>  让圆角内的点都因为小于 0 被丢弃了，我们把它翻过来就是了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">clip</span>(- (sdf - <span class="number">1</span>));</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230327/Pasted%20image%2020230326160343.png" class=""><br/><p>步骤四：<br>画内圈，边框的宽度先取 0.2 测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;  </span><br><span class="line">float2 coords = i.<span class="property">uv</span>;</span><br><span class="line">coords.<span class="property">x</span> *= <span class="number">6</span>;</span><br><span class="line">float2 pointOnLineSeg = <span class="title function_">float2</span>( <span class="title function_">clamp</span>(coords.<span class="property">x</span>, <span class="number">0.5</span>, <span class="number">5.5</span>), <span class="number">0.5</span>);</span><br><span class="line">float sdf = <span class="title function_">distance</span>(coords, pointOnLineSeg) * <span class="number">2</span>;</span><br><span class="line"><span class="title function_">clip</span>(- (sdf - <span class="number">1</span>));</span><br><span class="line"><span class="comment">// 计算方式是一样的，直接加上差值 0.2 就行</span></span><br><span class="line">float borderSdf = sdf + <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">float4</span>(borderSdf.<span class="property">xxx</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230327/Pasted%20image%2020230326160941.png" class=""><p>现在所有点到中线的距离范围在 [0,1.2]，可以观察到其中 [1,1.2] 的部分就是我们的目标边框</p><br/><p>步骤五：<br>得到边框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;  </span><br><span class="line">float2 coords = i.<span class="property">uv</span>;</span><br><span class="line">coords.<span class="property">x</span> *= <span class="number">6</span>;</span><br><span class="line">float2 pointOnLineSeg = <span class="title function_">float2</span>( <span class="title function_">clamp</span>(coords.<span class="property">x</span>, <span class="number">0.5</span>, <span class="number">5.5</span>), <span class="number">0.5</span>);</span><br><span class="line">float sdf = <span class="title function_">distance</span>(coords, pointOnLineSeg) * <span class="number">2</span>;</span><br><span class="line"><span class="title function_">clip</span>(- (sdf - <span class="number">1</span>));</span><br><span class="line">float borderSdf = sdf + <span class="number">0.2</span>;</span><br><span class="line"><span class="comment">// 比较 1 和 borderSdf ，大于 1 则为 1 ，小于 1 则为 0</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">float4</span>(<span class="title function_">step</span>(<span class="number">1</span>, borderSdf).<span class="property">xxx</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230327/Pasted%20image%2020230326161333.png" class=""><br/><p>步骤六：<br>接入参数作为变量，包括圆角角度、边框宽度、边框颜色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;  </span><br><span class="line"><span class="comment">// 测试假定分为 6 段，现在改为输入参数</span></span><br><span class="line">float split = <span class="number">1</span> / _Radius;</span><br><span class="line">float2 coords = i.<span class="property">uv</span>;</span><br><span class="line">coords.<span class="property">x</span> *= split;</span><br><span class="line">float2 pointOnLineSeg = <span class="title function_">float2</span>( <span class="title function_">clamp</span>(coords.<span class="property">x</span>, <span class="number">0.5</span>, split - <span class="number">0.5</span>), <span class="number">0.5</span>);</span><br><span class="line">float sdf = <span class="title function_">distance</span>(coords, pointOnLineSeg) * <span class="number">2</span>;</span><br><span class="line"><span class="title function_">clip</span>(- (sdf - <span class="number">1</span>));</span><br><span class="line"><span class="comment">// 边框宽度</span></span><br><span class="line">float borderSdf = sdf + _Border;</span><br><span class="line"><span class="comment">// 边框颜色</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">float4</span>(<span class="title function_">step</span>(<span class="number">1</span>, borderSdf).<span class="property">xxx</span>, <span class="number">1</span>) * _Color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230327/Pasted%20image%2020230326161535.png" class=""><br/><p>步骤七：<br>优化边缘锯齿</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;  </span><br><span class="line">float split = <span class="number">1</span> / _Radius;</span><br><span class="line">float2 coords = i.<span class="property">uv</span>;</span><br><span class="line">coords.<span class="property">x</span> *= split;</span><br><span class="line">float2 pointOnLineSeg = <span class="title function_">float2</span>( <span class="title function_">clamp</span>(coords.<span class="property">x</span>, <span class="number">0.5</span>, split - <span class="number">0.5</span>), <span class="number">0.5</span>);</span><br><span class="line">float sdf = <span class="title function_">distance</span>(coords, pointOnLineSeg) * <span class="number">2</span>;</span><br><span class="line"><span class="title function_">clip</span>(- (sdf - <span class="number">1</span>));</span><br><span class="line">float borderSdf = sdf + _Border;</span><br><span class="line"><span class="comment">// 利用 fwidth 得到屏幕空间的色彩变化率，数值范围在 [0,max] （ max 具体看屏幕，通常为 1 ）</span></span><br><span class="line">float pd = <span class="title function_">fwidth</span>(borderSdf);</span><br><span class="line"><span class="comment">// 用 saturate 夹紧数值范围 [0,1]，同样达到之前用 step 的效果</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">saturate</span>((borderSdf - <span class="number">1</span>) / pd )* _Color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230327/Pasted%20image%2020230326161838.png" class=""><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230327/Pasted%20image%2020230326162003.png" class=""><br/><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="函数-clamp"><a href="#函数-clamp" class="headerlink" title="函数 clamp"></a>函数 clamp</h3><p>clamp 函数用于将一个值限制在一个指定的范围内。它接受三个参数，第一个是要限制的值，第二个是范围的下限，第三个是范围的上限。如果值小于下限，函数返回下限，如果值大于上限，函数返回上限，否则返回原始值。例如，<code>clamp(x,0.5,1.5)</code> 将 x 限制在 0.5 到 1.5 之间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)</span><br><span class="line">&#123;</span><br><span class="line">    Out = clamp(In, Min, Max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="函数-saturate"><a href="#函数-saturate" class="headerlink" title="函数 saturate"></a>函数 saturate</h3><p>简化版的 clamp，指定限制范围为 [0, 1] 。</p><p>saturate 函数用于将一个值限制在 0 到 1 之间。它接受一个参数，即要限制的值。如果该值小于 0，则返回 0，如果该值大于 1，则返回 1，否则返回原始值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void Unity_Saturate_float4(float4 In, out float4 Out)</span><br><span class="line">&#123;</span><br><span class="line">    Out = saturate(In);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="函数-distance"><a href="#函数-distance" class="headerlink" title="函数 distance"></a>函数 distance</h3><p>distance 函数用于计算两个点之间的距离。它接受两个参数，即两个点的坐标。distance 函数实际上是计算两个点之间的欧几里得距离，即勾股定理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void Unity_Distance_float4(float4 A, float4 B, out float Out)</span><br><span class="line">&#123;</span><br><span class="line">    Out = distance(A, B);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这个函数和 <code>length</code> 的区别，length 的传入是一个向量，计算其长度；<code>distance</code> 则是传入两个向量，计算它们之间的距离。在使用中有些场景可以相互替换用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">float dist = length(vec1 - vec2);</span><br><span class="line">float len = distance(vec, vec3(0, 0, 0));</span><br></pre></td></tr></table></figure><br/><h3 id="函数-clip"><a href="#函数-clip" class="headerlink" title="函数 clip"></a>函数 clip</h3><p>clip 函数用于在特定条件下舍弃像素片段。它接受一个参数，即一个浮点数，如果该参数小于等于 0，则该像素片段将被舍弃。</p><br/><h3 id="函数-step"><a href="#函数-step" class="headerlink" title="函数 step"></a>函数 step</h3><p>相当于一个判断赋值的缩写&#x2F;语法糖，<code>step(edge, in)</code> 等于 <code>!!(in &gt;= edge)</code>，返回结果为 0 或1。</p><p>step 函数用于根据一个阈值将一个值转换为 0 或 1 。它接受两个参数，第一个是要比较的值，第二个是阈值。如果值小于等于阈值，则函数返回 0 ，否则返回1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void Unity_Step_float4(float4 Edge, float4 In, out float4 Out)</span><br><span class="line">&#123;</span><br><span class="line">    Out = step(Edge, In);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="函数-fwidth"><a href="#函数-fwidth" class="headerlink" title="函数 fwidth"></a>函数 fwidth</h3><p>相当于每个用户的屏幕空间中当前像素的变化率，数值越大相邻像素间差距越大，表现为数学上的变化率。返回的数值范围上限取决于物理屏幕的分辨率，通常为 1，下限则为0 （比如严格纯色的场景）。下次可以合着抗锯齿一起单独讲一篇，通常也是用在各种边缘处理中。</p><p>fwidth 函数用于计算函数在屏幕空间中的变化率。它接受一个参数，即要计算的函数值。fwidth 函数实际上是对 dx 和 dy 函数的绝对值之和的计算，其中 dx 函数计算函数在 x 方向上的变化率，dy 函数计算函数在 y 方向上的变化率。</p><p>fwidth(x) &#x3D; abs(ddx(x)) + abs(ddy(x))。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230327/Pasted%20image%2020230326164958.png" class=""><br/><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>还是回到核心思路，找到中线按照距离算出要裁剪掉的部分，后面就比较顺了。</li><li>涉及到的函数比较多，包括处理数值范围的 <code>clamp</code>、<code>saturate</code>、<code>clip</code>，判断语法糖 <code>step</code>，处理边缘锯齿的变化率导数 <code>fwidth</code> 。</li><li>整个效果还有改进的空间，包括抗锯齿的细节上，也包括圆角的设计策略上。</li></ol><br/><br/><br/><br/><br/>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%B8%B2%E6%9F%93/">渲染</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/03/27/Shader%E5%85%A5%E9%97%A806/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Shader入门-05</title>
      <link>https://blog.liluhui.cn/2023/03/25/Shader%E5%85%A5%E9%97%A805/</link>
      <guid>https://blog.liluhui.cn/2023/03/25/Shader%E5%85%A5%E9%97%A805/</guid>
      <pubDate>Sat, 25 Mar 2023 14:07:14 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天的练习知识部分比较简单 💪&lt;br&gt;数字世界的颜色并不太好看，人的主观审美在数学表达里并不件容易的事&lt;/p&gt;
&lt;h2 id=&quot;效果&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天的练习知识部分比较简单 💪<br>数字世界的颜色并不太好看，人的主观审美在数学表达里并不件容易的事</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>一个基础的血条，在进入低血量状态时闪烁报警<br>👉<a href="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/video/20230325/Unity_Xu2AMKL76K_x264.mp4">展示备份（国内节点）</a><br>👇效果展示（科学上网）</p><div class="video-container"><iframe src="https://www.youtube.com/embed/X4SSNbmElRM" frameborder="0" loading="lazy" allowfullscreen></iframe></div><br/><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>附件：贴图</strong><br>链接：<a href="https://pan.baidu.com/s/18R0Nd_KgD5R9qOJTLnrctg">https://pan.baidu.com/s/18R0Nd_KgD5R9qOJTLnrctg</a><br>提取码：tvul </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Shader</span> <span class="string">&quot;Unlit/AloeaShader05&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">Properties</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Health (<span class="string">&quot;Health&quot;</span>, <span class="title class_">Range</span>(<span class="number">0</span>, <span class="number">1</span>)) = <span class="number">1</span></span><br><span class="line">        _MainTex (<span class="string">&quot;Texture&quot;</span>, 2D) = <span class="string">&quot;white&quot;</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">SubShader</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">Tags</span> &#123; <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Opaque&quot;</span> &#125;</span><br><span class="line">        <span class="variable constant_">LOD</span> <span class="number">100</span></span><br><span class="line">  </span><br><span class="line">        <span class="title class_">Pass</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable constant_">CGPROGRAM</span></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">  </span><br><span class="line">            #include <span class="string">&quot;UnityCG.cginc&quot;</span></span><br><span class="line">  </span><br><span class="line">            float _Health;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">  </span><br><span class="line">            struct appdata</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : <span class="variable constant_">POSITION</span>;</span><br><span class="line">                float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">  </span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">                float4 vertex : <span class="variable constant_">SV_POSITION</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert (appdata v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.<span class="property">vertex</span> = <span class="title class_">UnityObjectToClipPos</span>(v.<span class="property">vertex</span>);</span><br><span class="line">                o.<span class="property">uv</span> = v.<span class="property">uv</span>;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag (v2f i) : SV_Target</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                float lowHealth = <span class="number">0.2</span>;</span><br><span class="line">                <span class="comment">// float highHealth = 0.8;</span></span><br><span class="line">                float4 maskBar = <span class="title function_">float4</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">                float4 healthBar = <span class="title function_">tex2D</span>(_MainTex, <span class="title function_">float2</span>( _Health, i.<span class="property">uv</span>.<span class="property">y</span>) );</span><br><span class="line">                float flash = <span class="title function_">cos</span>(_Time.<span class="property">y</span> * <span class="number">10</span>) * <span class="number">0.3</span>;</span><br><span class="line">  </span><br><span class="line">                <span class="keyword">if</span> (_Health &lt; lowHealth) &#123;</span><br><span class="line">                    healthBar += flash;</span><br><span class="line">                &#125;</span><br><span class="line">  </span><br><span class="line">                float4 bar = <span class="title function_">lerp</span>(healthBar, maskBar, _Health &lt; i.<span class="property">uv</span>.<span class="property">x</span>);</span><br><span class="line">                <span class="keyword">return</span> bar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable constant_">ENDCG</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h2 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h2><p>步骤一：做出渐变的血条</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 从 红色 到 绿色 渐变/混合，沿着 uv.x 方向</span></span><br><span class="line">    float4 healthBar = <span class="title function_">lerp</span>(<span class="title function_">float4</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>), <span class="title function_">float4</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>), i.<span class="property">uv</span>.<span class="property">x</span>);</span><br><span class="line">    <span class="keyword">return</span> healthBar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230325/Pasted%20image%2020230324214119.png" class=""><br/><p>步骤二：增加血量数值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 血条背景色</span></span><br><span class="line">    float4 maskBar = <span class="title function_">float4</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 血条</span></span><br><span class="line">    float4 healthBar = <span class="title function_">lerp</span>(<span class="title function_">float4</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>), <span class="title function_">float4</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>), i.<span class="property">uv</span>.<span class="property">x</span>);</span><br><span class="line">    <span class="comment">// 判断血量数值： _Health &lt; i.uv.x 得到 0 或者 1，对应显示血条或者背景色</span></span><br><span class="line">    float4 bar = <span class="title function_">lerp</span>(healthBar, maskBar, _Health &lt; i.<span class="property">uv</span>.<span class="property">x</span>);</span><br><span class="line">    <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230325/Pasted%20image%2020230324214343.png" class=""><br/><p>步骤三：血条按照当前血量显示为纯色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    float4 maskBar = <span class="title function_">float4</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// i.uv.x 改为 _Health，按照当前血量显示纯色，而不是之前的渐变色</span></span><br><span class="line">    float4 healthBar = <span class="title function_">lerp</span>(<span class="title function_">float4</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>), <span class="title function_">float4</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>), _Health);</span><br><span class="line">    float4 bar = <span class="title function_">lerp</span>(healthBar, maskBar, _Health &lt; i.<span class="property">uv</span>.<span class="property">x</span>);</span><br><span class="line">    <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230325/Pasted%20image%2020230324215059.png" class=""><br/><p>步骤四：增加闪烁效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    float lowHealth = <span class="number">0.2</span>;</span><br><span class="line">    float4 maskBar = <span class="title function_">float4</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    float4 healthBar = <span class="title function_">lerp</span>(<span class="title function_">float4</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>), <span class="title function_">float4</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>), _Health);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 低于指定血量数值时闪烁</span></span><br><span class="line">    <span class="keyword">if</span> (_Health &lt; lowHealth) &#123;</span><br><span class="line">        float flash = <span class="title function_">cos</span>(_Time.<span class="property">y</span> * <span class="number">10</span>) * <span class="number">0.3</span>; <span class="comment">// 调试效果，数值范围限制在 -0.3 ~ 0.3</span></span><br><span class="line">        healthBar += flash; <span class="comment">// 这里用“加”颜色会有更强的加深和变亮（数值范围跨度更大），用“乘”则比较低调</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    float4 bar = <span class="title function_">lerp</span>(healthBar, maskBar, _Health &lt; i.<span class="property">uv</span>.<span class="property">x</span>);</span><br><span class="line">    <span class="keyword">return</span> bar;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230325/Pasted%20image%2020230324220144.png" class=""><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230325/Pasted%20image%2020230324215119.png" class=""><br/><p>步骤五：改成材质的方式，因为数学实现的过渡颜色太丑了（草绿..）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    float lowHealth = <span class="number">0.2</span>;</span><br><span class="line">    float4 maskBar = <span class="title function_">float4</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 改成材质，取当前血量处对应的颜色，x 坐标及血量数值，y 坐标取材质本身</span></span><br><span class="line">    float4 healthBar = <span class="title function_">tex2D</span>(_MainTex, <span class="title function_">float2</span>( _Health, i.<span class="property">uv</span>.<span class="property">y</span>) );</span><br><span class="line">    float flash = <span class="title function_">cos</span>(_Time.<span class="property">y</span> * <span class="number">10</span>) * <span class="number">0.3</span>;</span><br><span class="line">    <span class="keyword">if</span> (_Health &lt; lowHealth) &#123;</span><br><span class="line">        healthBar += flash;</span><br><span class="line">    &#125;</span><br><span class="line">    float4 bar = <span class="title function_">lerp</span>(healthBar, maskBar, _Health &lt; i.<span class="property">uv</span>.<span class="property">x</span>);</span><br><span class="line">    <span class="keyword">return</span> bar;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230325/Pasted%20image%2020230324220520.png" class=""><br/><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="颜色过渡"><a href="#颜色过渡" class="headerlink" title="颜色过渡"></a>颜色过渡</h3><p>程序处理颜色的过程中，颜色分量（RGB）是线性变化，这会导致出现一些理性的、不好看的色彩。比如这个练习中将红色和绿色线性混合会产生一种灰暗的棕色，而不是我们通常期望的明亮的黄色，即使采用 Gamma 曲线也不能得到符合视觉期望的效果。</p><br/><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">lerp</span>(<span class="title function_">float4</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>), <span class="title function_">float4</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>), i.<span class="property">uv</span>.<span class="property">x</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这张图为线性色彩空间</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230325/Pasted%20image%2020230323213034.png" class=""><p>这张图为 Gamma 2.2 色彩空间</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230325/Pasted%20image%2020230323213051.png" class=""><br/><p>为了解决这个问题，我们有两种方案可以选择：</p><p>一是如本次练习一样，改成精心设计的材质来表达色彩。</p><p>二是多定义几段中间的颜色，hack 色彩过渡的过程中是希望的片段颜色，比如这样强行让中间是黄色，效果就好多了，但可以观察到只是三段的话黄色和绿色中间还有一段棕黄色的片段。</p><br/><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> fixed4 frag (v2f i) : SV_Target &#123;</span><br><span class="line">    float t = i.<span class="property">uv</span>.<span class="property">x</span>;</span><br><span class="line">    fixed4 c;</span><br><span class="line">    <span class="keyword">if</span> (t &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">        c = <span class="title function_">lerp</span>(_Color1, _Color2, t * <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c = <span class="title function_">lerp</span>(_Color2, _Color3, (t - <span class="number">0.5</span>) * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230325/Pasted%20image%2020230323215053.png" class=""><br/><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>已经练手了几个案例了，回顾理解一下 Untiy Shader 中的数据类型。</p><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>float、float*</td><td>浮点数和浮点数向量类型，用于表示颜色、位置、缩放等值。其他还有 float2、float3 等，数字表示几位的向量。half、fixed 为更低精度的浮点数，具体<a href="https://blog.liluhui.cn/2023/03/01/Shader%E5%85%A5%E9%97%A801/#%F0%9F%A4%94-%E5%8D%95%E4%BD%8D%E7%B2%BE%E5%BA%A6">看这</a>。</td></tr><tr><td>bool</td><td>布尔类型，用于表示开关等值。</td></tr><tr><td>int</td><td>整数类型，用于表示计数器等值。</td></tr><tr><td>sampler、sampler*</td><td>纹理类型，用于表示从纹理中采样的颜色值。 其他还有sampler1D、sampler2D、sampler3D、samplerCUBE、samplerRECT。</td></tr><tr><td>matrix</td><td>矩阵类型，用于表示变换矩阵、旋转矩阵等值。也可以写为 float3x3 这类。</td></tr><tr><td>stuct</td><td>结构体类型，允许将多个变量组合为一个自定义类型，以便更方便地管理和传递数据。</td></tr><tr><td>uniform</td><td>用于表示在Shader编译时确定的常量值，类似于C++中的常量。</td></tr></tbody></table><p>文档：<a href="https://docs.unity3d.com/cn/2021.2/Manual/SL-DataTypesAndPrecision.html">https://docs.unity3d.com/cn/2021.2/Manual/SL-DataTypesAndPrecision.html</a></p><br/><br/><br/><br/><br/>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%B8%B2%E6%9F%93/">渲染</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/03/25/Shader%E5%85%A5%E9%97%A805/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Shader入门04</title>
      <link>https://blog.liluhui.cn/2023/03/21/Shader%E5%85%A5%E9%97%A804/</link>
      <guid>https://blog.liluhui.cn/2023/03/21/Shader%E5%85%A5%E9%97%A804/</guid>
      <pubDate>Tue, 21 Mar 2023 13:26:54 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;出去旅行了一周多，回来继续干活了 ✊&lt;br&gt;云南的自然风光真是爽心悦目，坐到我小小的桌前倒有些不习惯了哈哈。&lt;/p&gt;
&lt;br/&gt;

&lt;h2 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出去旅行了一周多，回来继续干活了 ✊<br>云南的自然风光真是爽心悦目，坐到我小小的桌前倒有些不习惯了哈哈。</p><br/><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>按照指定的混合程度图混合草地和岩石，地皮按照世界空间铺设</p><p>👉<a href="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/video/20230321/Unity_0s6WBko66o_x264.mp4">展示备份（国内节点）</a><br>👇效果展示 （科学上网）</p><div class="video-container"><iframe src="https://www.youtube.com/embed/CSzSV2TWkP8" frameborder="0" loading="lazy" allowfullscreen></iframe></div><br/><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>附件：贴图</strong><br>链接：<a href="https://pan.baidu.com/s/1_BS-VJculY-L3sKWgTtYAg">https://pan.baidu.com/s/1_BS-VJculY-L3sKWgTtYAg</a><br>提取码：6ue3 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Shader</span> <span class="string">&quot;Unlit/AloeaShader05&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="title class_">Properties</span></span><br><span class="line">  &#123;</span><br><span class="line">    _MainTex (<span class="string">&quot;Texture&quot;</span>, 2D) = <span class="string">&quot;white&quot;</span> &#123;&#125;    <span class="comment">// 材质1，草皮用</span></span><br><span class="line">    _Rock (<span class="string">&quot;Texture&quot;</span>, 2D) = <span class="string">&quot;white&quot;</span> &#123;&#125;       <span class="comment">// 材质2，岩石用</span></span><br><span class="line">    _Pattern (<span class="string">&quot;Texture&quot;</span>, 2D) = <span class="string">&quot;grey&quot;</span> &#123;&#125;     <span class="comment">// 材质3，混合程度</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">SubShader</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Tags</span> &#123; <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Opaque&quot;</span> &#125;</span><br><span class="line">    <span class="variable constant_">LOD</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pass</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="variable constant_">CGPROGRAM</span></span><br><span class="line">      #pragma vertex vert</span><br><span class="line">      #pragma fragment frag</span><br><span class="line"></span><br><span class="line">      #include <span class="string">&quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">      struct appdata</span><br><span class="line">      &#123;</span><br><span class="line">        float4 vertex : <span class="variable constant_">POSITION</span>;</span><br><span class="line">        float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      struct v2f</span><br><span class="line">      &#123;</span><br><span class="line">        float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">        float4 vertex : <span class="variable constant_">SV_POSITION</span>;</span><br><span class="line">        float3 <span class="attr">worldPos</span>: <span class="title class_">TEXCOORD1</span>;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      sampler2D _MainTex;</span><br><span class="line">      sampler2D _Rock;</span><br><span class="line">      sampler2D _Pattern;</span><br><span class="line"></span><br><span class="line">      v2f vert (appdata v)</span><br><span class="line">      &#123;</span><br><span class="line">        v2f o;</span><br><span class="line">        <span class="comment">// 转换为世界坐标</span></span><br><span class="line">        o.<span class="property">worldPos</span> = <span class="title function_">mul</span>( <span class="variable constant_">UNITY_MATRIX_M</span>, v.<span class="property">vertex</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本地空间转化为相机的剪辑空间</span></span><br><span class="line">        o.<span class="property">vertex</span> = <span class="title class_">UnityObjectToClipPos</span>(v.<span class="property">vertex</span>);</span><br><span class="line"></span><br><span class="line">        o.<span class="property">uv</span> = v.<span class="property">uv</span>;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      fixed4 frag (v2f i) : SV_Target</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 材质按照世界坐标xz表</span></span><br><span class="line">        float2 topDownProjection =i.<span class="property">worldPos</span>.<span class="property">xz</span>;</span><br><span class="line">        fixed4 moss = <span class="title function_">tex2D</span>(_MainTex, topDownProjection);</span><br><span class="line">        fixed4 rock = <span class="title function_">tex2D</span>(_Rock, topDownProjection);</span><br><span class="line">        <span class="comment">// 混合 Alpha</span></span><br><span class="line">        float pattern = <span class="title function_">tex2D</span>(_Pattern, topDownProjection); </span><br><span class="line">        float4 finalColor = <span class="title function_">lerp</span>(moss, rock, pattern);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> finalColor;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable constant_">ENDCG</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个案例混合部分的知识点和 <a href="https://blog.liluhui.cn/2023/03/01/Shader%E5%85%A5%E9%97%A801/">练习1</a> 是一样的，用到 <code>lerp</code> 函数混合，不同的是练习1是传入是色彩，这里是材质。</p><p>地皮采用世界坐标花了点时间，关键点需要 1. 得到绝对的世界坐标；2. 将材质匹配倒世界坐标。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> o.<span class="property">worldPos</span> = <span class="title function_">mul</span>( <span class="variable constant_">UNITY_MATRIX_M</span>, v.<span class="property">vertex</span>);</span><br><span class="line"><span class="number">2.</span> fixed4 moss = <span class="title function_">tex2D</span>(_MainTex, i.<span class="property">worldPos</span>.<span class="property">xz</span>);</span><br></pre></td></tr></table></figure><br/><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="材质基础"><a href="#材质基础" class="headerlink" title="材质基础"></a>材质基础</h3><p>从本质上来说，材质就是一张贴图、一张图片。但从表现来说，我们除了把材质当作贴图，比如这个练习中的草皮和岩石，我们也可以用材质表达混合程度、法线方向、位移程度。总之，我们需要理解图片中表达的色彩的本质是数字，数字可以用到处理任何事情。</p><p>材质有几个基本属性</p><ol><li>分辨率：纹理的像素数，通常以宽度和高度表示。</li><li>格式：纹理存储像素数据的方式，如 RGB、RGBA、ARGB、DXT 等。</li><li>过滤模式：指定纹理在放大或缩小时如何进行插值计算，常见的有点采样、双线性插值、三线性插值等。</li><li>包裹模式：指定纹理坐标超出 [0,1] 范围时如何处理，常见的有重复、镜像、夹取等。</li><li>Mipmap：一组预先计算的纹理级别，用于在不同距离和角度下呈现更好的纹理效果。</li><li>压缩：将纹理数据压缩以减小内存占用和提高渲染性能，常见的有 DXT、PVRTC、ETC 等格式。</li><li>纹理类型：指定纹理用于什么目的，如 Albedo（漫反射）、Normal（法线）、Metallic（金属度）、Emission（自发光）等。</li></ol><p>先要有个大致的了解，每一块再之后的练习中再展开聊聊。</p><br/><h3 id="处理坐标转化"><a href="#处理坐标转化" class="headerlink" title="处理坐标转化"></a>处理坐标转化</h3><p>untiy shaderlab 中有一系列引擎定义的内置变量供使用，包括我们之前用到的 <code>_Time</code> ，还有这次练习中用到的 <code>UNITY_MATRIX_M</code> 。这个练习中使用 <code>unity_ObjectToWorld</code> 替换也是一样的。<br>实现上，将当前的顶点乘以（<code>mul</code>）变化矩阵得到目标信息。</p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>unity_ObjectToWorld</td><td>一个 4x4 的矩阵，表示从对象空间到世界空间的变换矩阵。它包含了物体的旋转、缩放和平移信息，可以将对象空间中的顶点坐标转换为世界空间中的顶点坐标。</td></tr><tr><td>UNITY_MATRIX_M</td><td>一个 3x4 的矩阵，表示从对象空间到视图空间的变换矩阵。它只包含了物体的旋转和平移信息，不包括缩放信息，可以将对象空间中的顶点坐标转换为视图空间中的顶点坐标。</td></tr></tbody></table><p>文档： <a href="https://docs.unity3d.com/Manual/SL-UnityShaderVariables.html">https://docs.unity3d.com/Manual/SL-UnityShaderVariables.html</a></p><br/><br/><br/><br/><br/>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%B8%B2%E6%9F%93/">渲染</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/03/21/Shader%E5%85%A5%E9%97%A804/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Shader入门-03</title>
      <link>https://blog.liluhui.cn/2023/03/08/Shader%E5%85%A5%E9%97%A803/</link>
      <guid>https://blog.liluhui.cn/2023/03/08/Shader%E5%85%A5%E9%97%A803/</guid>
      <pubDate>Wed, 08 Mar 2023 13:49:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;借由 Unity Shader 实战学习 Shader ！&lt;/p&gt;
&lt;p&gt;带完整注释，一起学习 💪&lt;/p&gt;
&lt;br/&gt;


&lt;h2 id=</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>借由 Unity Shader 实战学习 Shader ！</p><p>带完整注释，一起学习 💪</p><br/><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>从圆心慢慢荡漾开的水波，有高低起伏感</p><p>👉<a href="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/video/20230306/Shader03_x264.mp4">展示备份（国内节点）</a><br>👇效果展示 （科学上网）</p><div class="video-container"><iframe src="https://www.youtube.com/embed/by1OvtSNBMI" frameborder="0" loading="lazy" allowfullscreen></iframe></div><br/><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">附件：</span><br><span class="line">1. 高面数平面</span><br><span class="line"></span><br><span class="line">链接：https://pan.baidu.com/s/1EObyLpQZDsQUXAxXS_QVtg 提取码：ij83 </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Shader</span> <span class="string">&quot;Unlit/AloeaShader04&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">Properties</span></span><br><span class="line">    &#123;</span><br><span class="line">        _WaveAmp (<span class="string">&quot;Wave Amplitude&quot;</span>, <span class="title class_">Range</span>(<span class="number">0</span>, <span class="number">0.1</span>)) = <span class="number">0.05</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">SubShader</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">Tags</span> &#123; <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Opaque&quot;</span> &#125;</span><br><span class="line">        <span class="variable constant_">LOD</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line">        <span class="title class_">Pass</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable constant_">CGPROGRAM</span></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">  </span><br><span class="line">            #include <span class="string">&quot;UnityCG.cginc&quot;</span></span><br><span class="line">  </span><br><span class="line">            float _WaveAmp;</span><br><span class="line">  </span><br><span class="line">            struct appdata</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : <span class="variable constant_">POSITION</span>;</span><br><span class="line">                float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">                float4 vertex : <span class="variable constant_">SV_POSITION</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 顶点着色器和片段着色器需要使用同样的波动计算，以保证高度上的变化和颜色始终一致</span></span><br><span class="line">            float getWave ( float2 uv ) &#123;</span><br><span class="line">                float2 uvsCenter = uv * <span class="number">2</span> - <span class="number">1</span>; <span class="comment">// 计算中心点, uv 的范围是 0 ~ 1</span></span><br><span class="line">                float distance = <span class="title function_">length</span>( uvsCenter ); <span class="comment">// 此顶点距离中心点的距离</span></span><br><span class="line">                <span class="comment">// PlanA：主计算处，根据距离形成波动，叠加上动画效果</span></span><br><span class="line">                float wave = <span class="title function_">cos</span>((distance - _Time.<span class="property">y</span> * <span class="number">0.1</span> ) * <span class="number">30</span>);</span><br><span class="line">                <span class="comment">// PlanB: 数值约束到 0 ~ 1 抖动更小</span></span><br><span class="line">                <span class="comment">// float wave = cos((distance - _Time.y * 0.1) * 30) * 0.5 + 0.5;</span></span><br><span class="line">                wave *= <span class="number">1</span> - distance; <span class="comment">// 渐变，距离中心越远数值越小（越接近黑色）</span></span><br><span class="line">                <span class="keyword">return</span> wave;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            v2f vert (appdata v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                v.<span class="property">vertex</span>.<span class="property">y</span> = <span class="title function_">getWave</span>(v.<span class="property">uv</span>) * _WaveAmp; <span class="comment">// 乘以波动的系数</span></span><br><span class="line"></span><br><span class="line">                o.<span class="property">vertex</span> = <span class="title class_">UnityObjectToClipPos</span>(v.<span class="property">vertex</span>);</span><br><span class="line">                o.<span class="property">uv</span> = v.<span class="property">uv</span>;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag (v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">getWave</span>(i.<span class="property">uv</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable constant_">ENDCG</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="效果调试过程"><a href="#效果调试过程" class="headerlink" title="效果调试过程"></a>效果调试过程</h3><p>步骤一：找圆心点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// i.uv.xy 的范围是 0 ~ 1，期望找到 (0.5, 0.5) 的位置为 0，结果范围 -1 ~ 1</span></span><br><span class="line"><span class="comment">// Q.为什么不是 i.uv - 0.5 ？也是可以的，这样结果范围是 -0.5 ~ 0.5，得到效果的波纹间距更大</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">float4</span>(i.<span class="property">uv</span> * <span class="number">2</span> - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230306/20230308001250.png" class=""><br/><p>步骤二：绘制波动的圆心环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">float2 uvsCenter = i.<span class="property">uv</span> * <span class="number">2</span> - <span class="number">1</span>; <span class="comment">// 中心点</span></span><br><span class="line">float distance = <span class="title function_">length</span>( uvsCenter ); <span class="comment">// 此顶点距离中心点的距离</span></span><br><span class="line">float wave = <span class="title function_">cos</span>((distance - _Time.<span class="property">y</span> * <span class="number">0.1</span> ) * <span class="number">30</span>) * <span class="number">0.5</span> + <span class="number">0.5</span>; <span class="comment">// cos 形成波动，结果范围 0 ~ 1，0 ~ 1 ~ 0 变化的过程就会形成视觉上的涟漪</span></span><br><span class="line"><span class="keyword">return</span> wave;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230306/Unity_6384nIeTVz.gif" class=""><br/><p>步骤三：顶点坐标位移赋予一样的波动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wave 方法封装，顶点着色器和片段着色器都用到</span></span><br><span class="line">float getWave ( float2 uv ) &#123;</span><br><span class="line">float2 uvsCenter = uv * <span class="number">2</span> - <span class="number">1</span>; <span class="comment">// 中心点</span></span><br><span class="line">float distance = <span class="title function_">length</span>( uvsCenter ); <span class="comment">// 此顶点距离中心点的距离</span></span><br><span class="line">float wave = <span class="title function_">cos</span>((distance - _Time.<span class="property">y</span> * <span class="number">0.1</span> ) * <span class="number">30</span>) * <span class="number">0.5</span> + <span class="number">0.5</span>; <span class="comment">// cos 形成波动，结果范围 0 ~ 1，0 ~ 1 ~ 0 变化的过程就会形成视觉上的涟漪</span></span><br><span class="line"><span class="keyword">return</span> wave;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶点着色器</span></span><br><span class="line">v2f vert (appdata v)</span><br><span class="line">&#123;</span><br><span class="line">v2f o;</span><br><span class="line">v.<span class="property">vertex</span>.<span class="property">y</span> = <span class="title function_">getWave</span>(v.<span class="property">uv</span>) * <span class="number">0.1</span>;  <span class="comment">// y 轴方向顶点位移波动</span></span><br><span class="line"></span><br><span class="line">o.<span class="property">vertex</span> = <span class="title class_">UnityObjectToClipPos</span>(v.<span class="property">vertex</span>);</span><br><span class="line">o.<span class="property">uv</span> = v.<span class="property">uv</span>;</span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230306/Unity_9VzBGmXefB.gif" class=""><br/><p>步骤三：效果参数调优</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">float getWave ( float2 uv ) &#123;</span><br><span class="line">float2 uvsCenter = uv * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">float distance = <span class="title function_">length</span>( uvsCenter );</span><br><span class="line"><span class="comment">// PlanA：主计算处，根据距离形成波动，叠加上动画效果</span></span><br><span class="line">float wave = <span class="title function_">cos</span>((distance - _Time.<span class="property">y</span> * <span class="number">0.1</span> ) * <span class="number">30</span>); <span class="comment">// 数值范围改为 -1 ~ 1, 这样黑色的部分更多些（0以下都是黑色）</span></span><br><span class="line">wave *= <span class="number">1</span> - distance; <span class="comment">// 渐变，距离中心越远数值越小（越接近黑色，高度越低）</span></span><br><span class="line"><span class="keyword">return</span> wave;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230306/Unity_9q8OitEqAV.gif" class=""><br/><h3 id="模型顶点数"><a href="#模型顶点数" class="headerlink" title="模型顶点数"></a>模型顶点数</h3><p>在今天这个练习中，波动是在顶点上进行的，那么平面的顶点数越多，整个波动就越丝滑，顶点数越少，效果就很硬朗。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230306/1.gif" class=""><br/><h3 id="函数-length"><a href="#函数-length" class="headerlink" title="函数 length"></a>函数 length</h3><p>length：相当于求向量 v 的长度。</p><p>二维向量</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230306/20230308211304.png" class="" width="500"><p>三维向量</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230306/20230308211314.png" class="" width="500"><br/><p>文档：<a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@6.9/manual/Length-Node.html">https:&#x2F;&#x2F;docs.unity3d.com&#x2F;Packages&#x2F;com.unity.shadergraph@6.9/manual/Length-Node.html</a><br><br/><br><br/></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>关注变量的维度，比如 uv 是二维的（xy），color 是四维的（ rgba )。</li><li>在这个案例中很直观地理解顶点着色器和片段着色器，一个用于处理顶点信息，也就是「形」，另一个用于处理表现信息，也就是「色」。</li><li>提取可复用的方法来增强代码的可维护性。</li><li>构建效果的过程就是关注数值变化的过程。</li></ol><br/><br/><br/><br/><br/>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%B8%B2%E6%9F%93/">渲染</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/03/08/Shader%E5%85%A5%E9%97%A803/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Shader入门-02</title>
      <link>https://blog.liluhui.cn/2023/03/05/Shader%E5%85%A5%E9%97%A802/</link>
      <guid>https://blog.liluhui.cn/2023/03/05/Shader%E5%85%A5%E9%97%A802/</guid>
      <pubDate>Sun, 05 Mar 2023 08:29:43 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;借由 Unity Shader 实战学习 Shader ！&lt;br&gt;带完整注释，一起学习 💪&lt;/p&gt;
&lt;br/&gt;

&lt;h2 id=&quot;效果&quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>借由 Unity Shader 实战学习 Shader ！<br>带完整注释，一起学习 💪</p><br/><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>环绕物体的水波纹特效，被神秘力量的光晕环绕，光晕从底部升起，向上逐渐消失</p><p>👉 <a href="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/video/20230302/Unity_pCmDu0YA2H_x264.mp4">展示备份（国内节点）</a><br>👇 效果展示 （科学上网）</p><div class="video-container"><iframe src="https://www.youtube.com/embed/IwoI8gNALdM" frameborder="0" loading="lazy" allowfullscreen></iframe></div><br/><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Shader</span> <span class="string">&quot;Unlit/AloeaShader03&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">Properties</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Color (<span class="string">&quot;Color&quot;</span>, <span class="title class_">Color</span>) = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="comment">// 参数声明</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">SubShader</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 指定渲染顺序</span></span><br><span class="line">        <span class="title class_">Tags</span> &#123; </span><br><span class="line">            <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Transparent&quot;</span></span><br><span class="line">            <span class="string">&quot;Queue&quot;</span>=<span class="string">&quot;Transparent&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Pass</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title class_">Cull</span> <span class="title class_">Off</span> <span class="comment">// 因为做的半透明效果，关闭剔除</span></span><br><span class="line">            <span class="title class_">ZWrite</span> off <span class="comment">// 因为做的半透明效果，关闭写入深度缓存</span></span><br><span class="line">            <span class="title class_">Blend</span> <span class="title class_">One</span> <span class="title class_">One</span> <span class="comment">// 混合相加实现半透明效果</span></span><br><span class="line"></span><br><span class="line">            <span class="variable constant_">CGPROGRAM</span></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include <span class="string">&quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            #define <span class="variable constant_">TAU</span> <span class="number">6.283185</span> <span class="comment">// 圆周常数</span></span><br><span class="line"></span><br><span class="line">            float4 _Color;</span><br><span class="line"></span><br><span class="line">            struct appdata</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : <span class="variable constant_">POSITION</span>;</span><br><span class="line">                float3 <span class="attr">normal</span>: <span class="variable constant_">NORMAL</span>;</span><br><span class="line">                float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : <span class="variable constant_">SV_POSITION</span>;</span><br><span class="line">                float3 <span class="attr">normal</span>: <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">                float2 uv : <span class="title class_">TEXCOORD1</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            v2f vert (appdata v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.<span class="property">vertex</span> = <span class="title class_">UnityObjectToClipPos</span>(v.<span class="property">vertex</span>);</span><br><span class="line">                o.<span class="property">normal</span> = <span class="title class_">UnityObjectToWorldNormal</span>(v.<span class="property">normal</span>);</span><br><span class="line">                o.<span class="property">uv</span> = v.<span class="property">uv</span>;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这部分重点，看下文详解</span></span><br><span class="line">            fixed4 frag (v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                float offset = <span class="title function_">cos</span>(i.<span class="property">uv</span>.<span class="property">x</span> * <span class="variable constant_">TAU</span> * <span class="number">8</span>) * <span class="number">0.02</span>;</span><br><span class="line">                float t = <span class="title function_">cos</span>((i.<span class="property">uv</span>.<span class="property">y</span> + offset - _Time.<span class="property">x</span> * <span class="number">2</span>) * <span class="number">30</span>) * <span class="number">0.5</span> + <span class="number">0.5</span>; </span><br><span class="line">                float topBottomRemover = (<span class="title function_">abs</span>(i.<span class="property">normal</span>.<span class="property">y</span>) &lt; <span class="number">0.999</span>);  </span><br><span class="line">                float4 outColor = _Color * t * topBottomRemover;</span><br><span class="line">                <span class="keyword">return</span> outColor;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable constant_">ENDCG</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="🤔效果调试过程"><a href="#🤔效果调试过程" class="headerlink" title="🤔效果调试过程"></a>🤔效果调试过程</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S1</span></span><br><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    float t = <span class="title function_">cos</span>(i.<span class="property">uv</span>.<span class="property">y</span> * <span class="number">30</span>); <span class="comment">// 做出横向条纹</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">float4</span>(t, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230305/1.png" class="" width="500"><br/><br/><br/><br/><br/><br/><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S2</span></span><br><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    float offset = <span class="title function_">cos</span>(i.<span class="property">uv</span>.<span class="property">x</span> * <span class="number">40</span>) * <span class="number">0.02</span>; <span class="comment">// 叠加另一个方向</span></span><br><span class="line">    float t = <span class="title function_">cos</span>((i.<span class="property">uv</span>.<span class="property">y</span> + offset) * <span class="number">30</span>); <span class="comment">// 形成波纹</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">float4</span>(t, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230305/2.png" class="" width="500"><br/><br/><br/><br/><br/><br/><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S3</span></span><br><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    float offset = <span class="title function_">cos</span>(i.<span class="property">uv</span>.<span class="property">x</span> * <span class="number">40</span>) * <span class="number">0.02</span>;</span><br><span class="line">    float t = <span class="title function_">cos</span>((i.<span class="property">uv</span>.<span class="property">y</span> + offset) * <span class="number">30</span>);</span><br><span class="line">    t *= <span class="number">1</span> - i.<span class="property">uv</span>.<span class="property">y</span>; <span class="comment">// 叠加一个 y 轴方向的渐变，形成一个渐渐消失的过渡</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">float4</span>(t, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230305/3.png" class="" width="500"><br/><br/><br/><br/><br/><br/><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S4</span></span><br><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">   float topBottomRemover = <span class="title function_">abs</span>(i.<span class="property">normal</span>.<span class="property">y</span>);  <span class="comment">// 用法线方向计算出顶部和底部，用于剔除</span></span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">float4</span>(topBottomRemover, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230305/4.png" class="" width="500"><br/><br/><br/><br/><br/><br/><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S5</span></span><br><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    float offset = <span class="title function_">cos</span>(i.<span class="property">uv</span>.<span class="property">x</span> * <span class="number">40</span>) * <span class="number">0.02</span>;</span><br><span class="line">    <span class="comment">// 将 cos 结果的 -1 ~ 1 修正到期望的 0 ~ 1 范围。x * 0.5 + 0.5 </span></span><br><span class="line">    float t = <span class="title function_">cos</span>((i.<span class="property">uv</span>.<span class="property">y</span> + offset) * <span class="number">30</span>) * <span class="number">0.5</span> + <span class="number">0.5</span>; </span><br><span class="line">    t *= <span class="number">1</span> - i.<span class="property">uv</span>.<span class="property">y</span>; </span><br><span class="line">    <span class="comment">// 顶部面的法向量 y 为 1， 所以结果为 0 ，相乘后就可以实现出去掉顶部和底部的面</span></span><br><span class="line">    float topBottomRemover = (<span class="title function_">abs</span>(i.<span class="property">normal</span>.<span class="property">y</span>) &lt; <span class="number">0.999</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">float4</span>(t * topBottomRemover, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230305/5.png" class="" width="500"><br/><br/><br/><br/><br/><br/><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S6</span></span><br><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    float offset = <span class="title function_">cos</span>(i.<span class="property">uv</span>.<span class="property">x</span> * <span class="number">40</span>) * <span class="number">0.02</span>;</span><br><span class="line">    float t = <span class="title function_">cos</span>((i.<span class="property">uv</span>.<span class="property">y</span> + offset) * <span class="number">30</span>) * <span class="number">0.5</span> + <span class="number">0.5</span>;</span><br><span class="line">    t *= <span class="number">1</span> - i.<span class="property">uv</span>.<span class="property">y</span>;</span><br><span class="line">    float topBottomRemover = (<span class="title function_">abs</span>(i.<span class="property">normal</span>.<span class="property">y</span>) &lt; <span class="number">0.999</span>); </span><br><span class="line">    <span class="comment">// 相乘上目标颜色，t * topBottomRemover 是一个 0 ~ 1 范围的 Alpha</span></span><br><span class="line">    float4 outColor = _Color * t * topBottomRemover;  </span><br><span class="line">    <span class="keyword">return</span> outColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230305/6.png" class="" width="500"><br/><br/><br/><br/><br/><br/><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S7</span></span><br><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    float offset = <span class="title function_">cos</span>(i.<span class="property">uv</span>.<span class="property">x</span> * <span class="number">40</span>) * <span class="number">0.02</span>;</span><br><span class="line">    <span class="comment">// cos 函数内加上一个时间差，模拟实现动画效果，用加法或者减法改变动画形成的方向</span></span><br><span class="line">    float t = <span class="title function_">cos</span>((i.<span class="property">uv</span>.<span class="property">y</span> + offset - _Time.<span class="property">x</span> * <span class="number">2</span>) * <span class="number">30</span>) * <span class="number">0.5</span> + <span class="number">0.5</span>;  </span><br><span class="line">    t *= <span class="number">1</span> - i.<span class="property">uv</span>.<span class="property">y</span>;</span><br><span class="line">    float topBottomRemover = (<span class="title function_">abs</span>(i.<span class="property">normal</span>.<span class="property">y</span>) &lt; <span class="number">0.999</span>); </span><br><span class="line">    float4 outColor = _Color * t * topBottomRemover; </span><br><span class="line">    <span class="keyword">return</span> outColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_Time 是内置变量，_Time.xyzw 对应不同的时间分量。t 是开始渲染至今的时间，单位为秒，我们在上面约束在了 cos 函数内，这意味着采用 .x 的动画速度是慢于 .y 20倍的，但用哪个并不重要，因为都是根据效果调试出来的。<br>_Time.x &#x3D; t &#x2F; 20<br>_Time.y &#x3D; t<br>_Time.z &#x3D; t * 2<br>_Time.w &#x3D; t * 4</p><p><strong>现在，整个效果已经出来了！</strong> 😝 </p><br/><br/><br/><br/><br/><br/><p>我们检查下细节发现，在圆柱一圈的连接处（uv 的边缘）上，出现了断横，就像我们廉价的条纹毛线衣一样不够优雅。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230305/7.png" class="" width="500"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S8</span></span><br><span class="line">#define <span class="variable constant_">TAU</span> <span class="number">6.283185</span></span><br><span class="line"></span><br><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">      float offset = <span class="title function_">cos</span>(i.<span class="property">uv</span>.<span class="property">x</span> * <span class="variable constant_">TAU</span> * <span class="number">8</span>) * <span class="number">0.02</span>; <span class="comment">// 借助圆周常数的力量</span></span><br><span class="line">      float t = <span class="title function_">cos</span>((i.<span class="property">uv</span>.<span class="property">y</span> + offset - _Time.<span class="property">x</span> * <span class="number">2</span>) * <span class="number">30</span>) * <span class="number">0.5</span> + <span class="number">0.5</span>; </span><br><span class="line">      float topBottomRemover = (<span class="title function_">abs</span>(i.<span class="property">normal</span>.<span class="property">y</span>) &lt; <span class="number">0.999</span>);  </span><br><span class="line">      float4 outColor = _Color * t * topBottomRemover;</span><br><span class="line">      <span class="keyword">return</span> outColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230305/8.png" class="" width="500"><p><strong>完美 ~</strong> 😝😝</p><br/><br/><h3 id="🤔剔除-Cull"><a href="#🤔剔除-Cull" class="headerlink" title="🤔剔除 Cull"></a>🤔剔除 Cull</h3><p>引擎在处理剔除的时候，默认摄像机看不到的面是不会渲染的，这意味着物体的背面是不会被渲染的，这个场景下会产生我们想要的透明物体只剩下前面而看不到后面的问题，所以我们需要关闭剔除。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230305/9.png" class=""><p>Cull 有三种选项，<br><strong>Back</strong>：摄像机看不到的那一面剔除，默认值，常规情况下（非透明）确实应该这么处理以提高性能，毕竟看不到嘛<br><strong>Front</strong>：摄像机看得到的那一面剔除，看不到的那一面展示，做一些特殊效果时可以用到<br><strong>Off</strong>：不管摄像机看不看的面都展示，不需要计算剔除</p><p>注意这里的 Cull 指的是物体不同面在摄像机方位下的剔除规则，如果物体根本就超出了视锥体&#x2F;视野范围，那么当然还是会直接剔除的，这不是 Shader 部分处理的事。</p><p>文档：<a href="https://docs.unity3d.com/Manual/SL-Cull.html">https://docs.unity3d.com/Manual/SL-Cull.html</a></p><br/><h3 id="🤔混合透明-Alpha-Blend"><a href="#🤔混合透明-Alpha-Blend" class="headerlink" title="🤔混合透明 Alpha Blend"></a>🤔混合透明 Alpha Blend</h3><p>我们在这个案例中采用 Alpha Blend 这种方式实现的半透明效果。之后我可以单独整理下半透明的实现原理和方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Blend</span> <span class="title class_">One</span> <span class="title class_">One</span></span><br></pre></td></tr></table></figure><p>指令使用上我们用到 <code>Blend sourceFactor destinationFactor</code>。<br>表示最终颜色 &#x3D; 物体颜色 * sourceFactor + 屏幕已有颜色 * destinationFactor，而 One 对应的是 1，这样就实现了透明效果。<br>注意这里不能用 Zero，因为除了 0,0,0,0 的部分要去除，正常的绿色波纹部分我们是不希望去除的，只需要用 0,0,0,0 去乘以 1 就可以实现去除了。</p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230305/10.png" class="" width="500"><p>其他还有一些指令，下次用到再展开聊聊不同的效果<br>文档：<a href="https://docs.unity3d.com/Manual/SL-Blend.html">https://docs.unity3d.com/Manual/SL-Blend.html</a></p><br/><h3 id="🤔渲染顺序-RenderQueue"><a href="#🤔渲染顺序-RenderQueue" class="headerlink" title="🤔渲染顺序 RenderQueue"></a>🤔渲染顺序 RenderQueue</h3><p>默认情况下， Unity 根据对象距离摄像机的距离由远及近依次渲染，以保证我们看到的物体先后关系是正确。但一些情况则需要开发者特别设置，比如当对象是透明的..<br>我们可以通过设置 Queue Tag 改变渲染的顺序，当不同的实体（SubShader）采用不同的类就决定了它们的先后。<br>注意指定渲染顺序生效，需要声明关闭写入深度缓存 <code>ZWrite Off</code>, 否则依然以Unity的距离计算为准。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Tags</span> &#123; <span class="string">&quot;Queue&quot;</span>=<span class="string">&quot;Overlay&quot;</span> &#125;</span><br><span class="line"><span class="title class_">Tags</span> &#123; <span class="string">&quot;Queue&quot;</span>=<span class="string">&quot;Overlay-10&quot;</span> &#125;</span><br><span class="line"><span class="title class_">Tags</span> &#123; <span class="string">&quot;Queue&quot;</span>=<span class="string">&quot;Overlay+10&quot;</span> &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Background</td><td>这个队列是最先渲染的，比如天空盒一类用它</td></tr><tr><td>Geometry</td><td>默认渲染队列，大部分实体几何体用它</td></tr><tr><td>AlphaTest</td><td>开启透明度测试的对象</td></tr><tr><td>GeometryLast</td><td>所有 Geometry 和 AlphaTest 渲染完成后</td></tr><tr><td>Transparent</td><td>所有 Geometry 和 AlphaTest 渲染完成后，再按照从远往近顺序进行渲染，透明对象用它</td></tr><tr><td>Overlay</td><td>所有叠加效果一类用它</td></tr></tbody></table><p>文档：<a href="https://docs.unity3d.com/ScriptReference/Rendering.RenderQueue.html">https://docs.unity3d.com/ScriptReference/Rendering.RenderQueue.html</a></p><br/><br/><br/><br/><br/><br/>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%B8%B2%E6%9F%93/">渲染</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/03/05/Shader%E5%85%A5%E9%97%A802/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Shader入门-01</title>
      <link>https://blog.liluhui.cn/2023/03/01/Shader%E5%85%A5%E9%97%A801/</link>
      <guid>https://blog.liluhui.cn/2023/03/01/Shader%E5%85%A5%E9%97%A801/</guid>
      <pubDate>Wed, 01 Mar 2023 15:14:16 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;借由 Unity Shader 实战学习 Shader ！&lt;br&gt;带完整注释，一起学习 💪&lt;/p&gt;
&lt;br/&gt;

&lt;h2 id=&quot;效果&quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>借由 Unity Shader 实战学习 Shader ！<br>带完整注释，一起学习 💪</p><br/><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>指定颜色渐变的效果，可以设置渐变开始及结束的位置</p><p>👉<a href="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/video/20230301/Unity_tArH3naEkY_x264.mp4">展示备份（国内节点）</a><br>👇效果展示（科学上网） </p><div class="video-container"><iframe src="https://www.youtube.com/embed/r4a1a4LSDU0" frameborder="0" loading="lazy" allowfullscreen></iframe></div><br/><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Shader</span> <span class="string">&quot;Unlit/AloeaShader01&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">Properties</span></span><br><span class="line">    &#123;</span><br><span class="line">        _StartColor (<span class="string">&quot;Start Color&quot;</span>, <span class="title class_">Color</span>) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="comment">// 定义传入起始颜色</span></span><br><span class="line">        _EndColor (<span class="string">&quot;End Color&quot;</span>, <span class="title class_">Color</span>) = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="comment">// 定义传入结束颜色</span></span><br><span class="line">        _StartPos (<span class="string">&quot;Start Postion&quot;</span>, <span class="title class_">Range</span>(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">0</span> <span class="comment">// 定义传入起始位置</span></span><br><span class="line">        _EndPos (<span class="string">&quot;End Position&quot;</span>, <span class="title class_">Range</span>(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">1</span> <span class="comment">// 定义传入结束位置</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">SubShader</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">Tags</span> &#123; <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Opaque&quot;</span> &#125;</span><br><span class="line">        <span class="variable constant_">LOD</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line">        <span class="title class_">Pass</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable constant_">CGPROGRAM</span></span><br><span class="line">            #pragma vertex vert  <span class="comment">// 声明顶点着色器的方法</span></span><br><span class="line">            #pragma fragment frag <span class="comment">// 声明片段着色器的方法</span></span><br><span class="line"></span><br><span class="line">            #include <span class="string">&quot;UnityCG.cginc&quot;</span> <span class="comment">// 引用 CG 包</span></span><br><span class="line"></span><br><span class="line">            float4 _StartColor; <span class="comment">// 变量引入</span></span><br><span class="line">            float4 _EndColor; <span class="comment">// 变量引入</span></span><br><span class="line">            float _StartPos; <span class="comment">// 变量引入</span></span><br><span class="line">            float _EndPos; <span class="comment">// 变量引入</span></span><br><span class="line"></span><br><span class="line">            struct appdata</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : <span class="variable constant_">POSITION</span>;</span><br><span class="line">                float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : <span class="variable constant_">SV_POSITION</span>;</span><br><span class="line">                float2 uv : <span class="title class_">TEXCOORD0</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            v2f vert (appdata v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.<span class="property">vertex</span> = <span class="title class_">UnityObjectToClipPos</span>(v.<span class="property">vertex</span>); <span class="comment">// 本地空间转化为相机的剪辑空间</span></span><br><span class="line">                o.<span class="property">uv</span> = v.<span class="property">uv</span>; <span class="comment">// 传递uv信息</span></span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// a b 定义线性数值的范围，计算 v 在此范围内的位置</span></span><br><span class="line">            float <span class="title class_">InverserLerp</span> (float a, float b, float v) &#123;</span><br><span class="line">                <span class="keyword">return</span> (v-a)/(b-a);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag (v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                float4 t = <span class="title class_">InverserLerp</span>(_StartPos, _EndPos, i.<span class="property">uv</span>.<span class="property">x</span>); <span class="comment">// 把 v 约束在 a ~ b 之间</span></span><br><span class="line">                float4 outColor = <span class="title function_">lerp</span>(_StartColor, _EndColor, t); <span class="comment">// 按照 t 插值</span></span><br><span class="line">                <span class="keyword">return</span> outColor;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable constant_">ENDCG</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="🤔-颜色过渡不正常"><a href="#🤔-颜色过渡不正常" class="headerlink" title="🤔 颜色过渡不正常"></a>🤔 颜色过渡不正常</h3><p>颜色过渡不正常需要修改下工程的色彩空间计算方式，从 Linear 改为 gamma，原因可以看我<a href="https://blog.liluhui.cn/2022/10/28/Recognize-Graphics-And-Rasterization-Aliasing/#%E5%B8%B8%E8%AF%865-%E5%A5%87%E6%80%AA%E7%9A%84%E9%A2%9C%E8%89%B2%E8%BF%87%E6%B8%A1%E9%94%99%E8%AF%AF">这篇</a>的科普。<br>位置在 Edit &gt; Project Settings，搜索 Rendering<br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230301/image.png" alt="image.png"></p><br/><h3 id="🤔-Lerp-函数-可视化理解"><a href="#🤔-Lerp-函数-可视化理解" class="headerlink" title="🤔 Lerp 函数 可视化理解"></a>🤔 Lerp 函数 可视化理解</h3><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230301/LerpNode.jpg"><br><strong>Lerp，A 和 B 之间按照 Alpha 线性插值。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( ( 1 - A ) * Alpha + B * Alpha)</span><br></pre></td></tr></table></figure><br/><h3 id="🤔-InverserLerp-函数-可视化理解"><a href="#🤔-InverserLerp-函数-可视化理解" class="headerlink" title="🤔 InverserLerp 函数 可视化理解"></a>🤔 InverserLerp 函数 可视化理解</h3><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20230301/2.gif.4d6f47d385d2b8ccd3d70c0c7389082e.gif" alt="2.gif.4d6f47d385d2b8ccd3d70c0c7389082e.gif"><br><strong>InverserLerp，v 值在 a ~ b 范围内对应比例的值。</strong><br>参考上图理解，a ~ b指定为 20 ~ 10，v 是 0 ~ 35。当 v 为 10 时，结果为 1；当 v 为 15 时，结果为 0.5；当 v 为 20 时，结果为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( v - a ) / ( b - a )  </span><br></pre></td></tr></table></figure><br/><h3 id="🤔-单位精度"><a href="#🤔-单位精度" class="headerlink" title="🤔 单位精度"></a>🤔 单位精度</h3><p><strong>float</strong>：32位浮点数，全浮。最高精度，建议用于世界空间位置，纹理坐标，复杂计算如幂&#x2F;指数等。<br><strong>half</strong>：16位浮点数，半浮。数值范围 [-60000, +60000]，建议用于方向、HDR 颜色等。<br><strong>fixed</strong>：11位浮点数，低精度。数值范围 [-2, +2]，用于低精度的运算变量。</p><p>注意以上是通常情况，实际各种硬件设备可能会有自己特别的定义，比如浮点精度特殊，或者根本就没有 half、fixed，总之精度的机制最终就是退会 float。</p><p>Unity Shader的数据类型和 HLSL 略有不同，针对移动平台做了优化。</p><br/><br/>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%B8%B2%E6%9F%93/">渲染</category>
      
      
      
      <comments>https://blog.liluhui.cn/2023/03/01/Shader%E5%85%A5%E9%97%A801/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>害怕不够精进，又不敢远离人群</title>
      <link>https://blog.liluhui.cn/2022/11/24/%E5%AE%B3%E6%80%95%E4%B8%8D%E5%A4%9F%E7%B2%BE%E8%BF%9B%EF%BC%8C%E5%8F%88%E4%B8%8D%E6%95%A2%E8%BF%9C%E7%A6%BB%E4%BA%BA%E7%BE%A4/</link>
      <guid>https://blog.liluhui.cn/2022/11/24/%E5%AE%B3%E6%80%95%E4%B8%8D%E5%A4%9F%E7%B2%BE%E8%BF%9B%EF%BC%8C%E5%8F%88%E4%B8%8D%E6%95%A2%E8%BF%9C%E7%A6%BB%E4%BA%BA%E7%BE%A4/</guid>
      <pubDate>Thu, 24 Nov 2022 11:59:29 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;00&quot;&gt;&lt;a href=&quot;#00&quot; class=&quot;headerlink&quot; title=&quot;00&quot;&gt;&lt;/a&gt;00&lt;/h2&gt;&lt;p&gt;作为掌握几门高级技术的职场人，我有一个持续处于纠结状态，或者换个好听的说法也叫持续在动态平衡的状态。就是一边想死磕一些东西，一些又被纷繁杂乱</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="00"><a href="#00" class="headerlink" title="00"></a>00</h2><p>作为掌握几门高级技术的职场人，我有一个持续处于纠结状态，或者换个好听的说法也叫持续在动态平衡的状态。就是一边想死磕一些东西，一些又被纷繁杂乱的信息扰动着；一边罗列着要深入探索的课题，一边是即将要开展的规划和讨论；一边是带上耳机的沉浸式工作，一边是开放碰撞想法的大办公区。我们好像免不了要面临一个问题，一方面我们的工作是基于协同的、我们的文化是基于思维碰撞的，另一方面，我们需要沉浸式地进行高脑力工作、我们需要沉浸式地深入下去而不是浮桥地“绕过”问题。</p><p>很多时候远远看着优秀的前辈，觉得怎么别人就又能钻研又能指点江山，一边对很多技术有过实践，一边参与在各种形形色色的事务之中。我知道这大概就是一种错觉，但这也非常清晰的展露出 —— 我也在这么期待我自己。</p><p>我们在害怕，害怕自己完全投入于技术细节中，害怕自己变成脚不着地的人，但不深入钻下去，又对自己感到不满，就好像，自己的爱好被自己耽误了。于此同时，我们又在渴望权力，渴望一种不可言状的被认可、被连接，那些有所成就的项目应该有我的参与，不敢错过，想要始终站在权力的中心圈的欲望。</p><p>但这个担忧又显得有点可笑，难道我们不能一边深入技术，一边思考战略、一边管理和执行细节吗？</p><p><strong>太难了</strong><br /><strong>也太贪心了</strong></p><p>这是我最近的结论，从我更多的观察和实践中，这件事在变得越来越难，它那么的完美，却越来越清晰的不可达。</p><p>这里的每一项，都需要深度投入，而深度投入其实有一个很客观的指标，就是 —— 时间，我们为一件事长期投入了多少时间，在这些事件中我们又有多深度。我们在某些方面达到真正的深度工作时，另一些工作就必然是浮浅工作。</p><p>要做好真正重要的事情，更先要面对的是，如何尊重我们的时间。</p><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><p><strong>尊重时间的第一步，是敢于去客观认识我们的时间。</strong>我们总是在凭感觉判断我应该去做什么了，这么多事情，我觉得投入在A上挺多的，但真的不量化一下，你不会发现自己存在这么多谬误。比如我的这个月其实投入在x的时间不过20小时，我感觉很多其实是因为有一周死磕在了这，后面每天都是杂乱的事情日子一晃就过完了。</p><p>要客观认识时间的背后是因为每个领域深度工作的能力都不是一簇而就的，不是我给自己安排了这个时间段，这个时间段我就能深入工作。或许，开个玩笑，能工作就不错了。</p><p>我们在任何工作的前期都可能会经常受挫、会逃避、会摸鱼、深入不进去，但这些都会随着持续投入而慢慢变化，我们要相信这种积累的力量，相信失败后可以继续的力量。</p><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><p><strong>尊重时间的第二步，是敢于拒绝和孤立</strong>。职场人，我们都受过“靠谱”的规训，做个靠谱的人的文化，比如消息要第一时间回复、帮助团队的开展工作。有时候，我觉得这种靠谱或许过了点头，或许我们就是可以建立自己的勿扰时段，我们可以建立自己的连接方式，我们可以拒绝过多的时间消耗和精力消耗，将深度工作和浮浅工作错开。</p><p>这里背后的原因是，我们总是过于乐观地觉得自己可以灵活切换于分散思维的状态和聚焦专注的状态，但不论从生物学理论还是心理学理论来说，这都是个糟糕的选择。我们的大脑在进入聚焦专注状态（心流）时是不断聚集髓磷脂的过程，这个过程帮助大脑形成封闭高效的区域神经回路，而分散于多种事情中则是一个区域髓磷脂此消彼长的状态，这就像肌肉训练时，特定部分的力量训练帮助我们持续募集肌肉神经，我们肌肉才能得以不断生长。</p><p>所以不能为了职场靠谱而靠谱，要做个有原则的人，这个原则是为了帮助我们更好的成长，同时匹配组织内的文化。但这或许也不那么容易，如果做不到也不用自责，事实上这一定会发生，就像看看多少老板发话领导也会丧失原则，这背后需要对自我的信心不断建立的过程。</p><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><p><strong>尊重时间的第三步，是觉察度量的黑洞、觉察平庸的忙碌。</strong>我感觉，大家都挺忙的，如果谁不忙，我下意识地也还会觉得ta是不是挺闲的，即使我知道一个人的价值绝对不是以忙碌来衡量，但我也需要进行一下思维的转化；如果一个人多年没有什么成绩也没有什么麻烦，并且ta始终忙碌，我下意识也会觉得干得还挺好的，即使我知道一个人的价值绝对不是以忙碌来衡量，我也还是需要进行一下思维的转化。我觉得这样的思维转化拿来要求所有人，也挺难的，它确实反人性了，那么背后究竟是什么原因？—— 度量的黑洞。</p><p>忙碌是一个有效的指标，一个人干一件活，两个人干两件活，一个人能两件活，挺好的。可到互联网这，这个度量失效了，在外界看来非常有道理的逻辑，在这里变成了有“聪明“的方法一天能解决，有常规的方法一周能解决，知道一个事这事就不需要时间，不知道一个事情就需要一个团队去磨出结论，度量，变成了一件很难的事。</p><p>所以，根本问题还是不能忽略度量，即使无法定义到绝对的一致，组织和个人也要持续去打磨这一度量标准，度量标准就是一个组织和个人如何定义自己目标的思考。如果不进行这一持续的思考，就会很自然且惰性地陷入平庸之中，变成大量忙碌之上的成果，变得没有竞争力。</p><p>警惕，警惕那些工作中奇怪的感觉，是不是自己正在下意识地按照最简单最熟悉的方式工作，隐约的感觉里挖掘那些真正有效但逃避的方式，敢不敢拿出来思考一下。</p><h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><p>最后，摘录一段《深度工作》书中的话，共勉 ~</p><p><strong>在事业中拥抱深度工作，通过深度工作培养个人技能，知识工作开始从令人心烦意乱、心力绞碎的责任变成一件令人满意的事情 —— 开启一扇通往新世界的大门，在那里万物闪耀。</strong></p>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E7%94%9F%E6%B4%BB/">生活</category>
      
      <category domain="https://blog.liluhui.cn/categories/%E6%80%9D%E8%80%83/">思考</category>
      
      
      <category domain="https://blog.liluhui.cn/tags/%E5%86%85%E5%9C%A8%E5%8A%9B%E9%87%8F/">内在力量</category>
      
      <category domain="https://blog.liluhui.cn/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/">个人成长</category>
      
      
      <comments>https://blog.liluhui.cn/2022/11/24/%E5%AE%B3%E6%80%95%E4%B8%8D%E5%A4%9F%E7%B2%BE%E8%BF%9B%EF%BC%8C%E5%8F%88%E4%B8%8D%E6%95%A2%E8%BF%9C%E7%A6%BB%E4%BA%BA%E7%BE%A4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>认识图形学 &amp; 光栅化之锯齿</title>
      <link>https://blog.liluhui.cn/2022/10/28/Recognize-Graphics-And-Rasterization-Aliasing/</link>
      <guid>https://blog.liluhui.cn/2022/10/28/Recognize-Graphics-And-Rasterization-Aliasing/</guid>
      <pubDate>Fri, 28 Oct 2022 15:33:06 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;内部分享文档&lt;br&gt;一半时间抛出问题了解 Computer Graphics，&lt;br&gt;一半时间切入了解一个子话题的子话题 Rasterization - Aliasing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;What-is-Comp</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>内部分享文档<br>一半时间抛出问题了解 Computer Graphics，<br>一半时间切入了解一个子话题的子话题 Rasterization - Aliasing</p></blockquote><h1 id="What-is-Computer-Graphics-？"><a href="#What-is-Computer-Graphics-？" class="headerlink" title="What is Computer Graphics ？"></a>What is Computer Graphics ？</h1><h2 id="01-视觉的发展"><a href="#01-视觉的发展" class="headerlink" title="01 视觉的发展"></a>01 视觉的发展</h2><p>五亿四千万年前地球上出现了第一个拥有“眼睛”的生物——三叶虫，当时的视觉也绝不是我们现在这样精密的视觉系统。自然界通过这么多年的努力才发展到了人类目前的视觉体系，我们认为理所当然自然而然的视觉，放在历史的长轴上看，视觉的产生和发展都是十分缓慢和长久的。</p><p>即使发展了如此久的时间，人类作为拥有非常丰富的视觉系统的生物，可见光的波段也就在 400nm~800nm 左右的范围内。而更多的其他的生物，它们的发展则各有迥异。</p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/1.png"></p> <br /> <br /><p>以狗狗为例，人眼中的丰富多彩的颜色，在它们眼中只有不同程度的蓝色、黄色、灰色。你或许会觉得那狗狗的视觉可真惨，但从另一方面来讲，狗狗能比人类识别多的多的梯度的灰色，这是人类没有的。<br /><br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/2.png" alt="image.png"><br> <br /></p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/3.png"></p> <br /> <br /> <br /> <br /><p>不同动物的眼睛，生物们有不一样的生理结构基础<br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/4.jpg"></p> <br /> <br /><p>人类的眼睛结构<br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/5.png"></p><blockquote><p>人眼是一种出色的仪器，能够在近距离和远距离下实现高度的视觉敏锐度、细节分辨力和准确的深度知觉。人眼还对大约380至740纳米电磁光波谱中的颜色具有很高的敏锐度，我们自然而然将其称为“可见”光谱，因为它对我们来说是可见的。<br>人眼被归类为“相机型”眼睛，因为就像相机镜头将光线会聚到胶片的感光层一样，人类角膜将进入眼睛的光线会聚到视网膜(一种感光膜)上。角膜使穿过瞳孔圆形入口的光线弯曲(折射)。虹膜(眼睛中围绕瞳孔的彩色部分)打开和闭合，使瞳孔变大或变小，调节穿过瞳孔圆形入口的光线量。光线首先穿过角膜，然后穿过较薄的晶状体，晶状体也会改变形状，以便能够使光线进一步弯曲，并将其会聚在视网膜上。<br>视网膜位于眼睛的后部，是一层较薄的组织，其中包含数百万个微小的感光神经细胞。这些神经细胞因其独特的形状而被称为“视杆细胞”和“视锥细胞”。视锥细胞集中在视网膜中央一个称为“黄斑”的区域。黄斑负责人眼中央会聚区域针对细节的分辨力，使人们能够看到微小细节和颜色，并识别面孔。<br>当光线明亮时，视锥细胞则提供清晰、敏锐的中央视觉来检测颜色和细节。它们包含色素或感光分子，分为三种类型，每种类型分别对以下不同波长范围的光线敏感：红色、蓝色和绿色。</p></blockquote> <br /> <br /><p><strong>人类的色彩感知，是很独特的东西，它取决于我们的生理结构——视锥，还取决于 光 。</strong></p> <br /> <br /> <br /> <br /><h2 id="02-计算机图形和计算机视觉"><a href="#02-计算机图形和计算机视觉" class="headerlink" title="02 计算机图形和计算机视觉"></a>02 计算机图形和计算机视觉</h2><p>人脑的大脑皮层是最特别的，人类是生物中大脑皮层最大的，很多动物也压根没有大脑皮层，而大脑皮层中有50%以上的神经细胞是用来做视觉方面的工作的，人类的眼睛是信号输入、大脑则是中枢计算器，对于人类来说显而易见的常识 —— “这杯水放在桌子上” ，对于其他只能来说是困难的，可以说，人类认为的最基本常识都是世界里的高级智慧。</p> <br /><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/6.jpg" alt="image.png"></p> <br /><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/7.png"></p><p><a href="https://phenaki.video/">https://phenaki.video/</a></p> <br /> <br /> <br /> <br /><h2 id="03-图形学领域的关键问题"><a href="#03-图形学领域的关键问题" class="headerlink" title="03 图形学领域的关键问题"></a>03 图形学领域的关键问题</h2><p><strong>（1）光栅化成像</strong></p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/8.png" alt="image.png"></p> <br /><p><strong>（2）几何表示</strong></p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/9.png" alt="image.png"></p> <br /><p><strong>（3）光的传播理论</strong><br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/10.png" alt="image.png"></p> <br /><p><strong>（4）动画与模拟</strong><br /></p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/11.png" alt="image.png"></p> <br /> <br /> <br /> <br /><h1 id="Some-Interesting-Performance-About-Computer-Graphics"><a href="#Some-Interesting-Performance-About-Computer-Graphics" class="headerlink" title="Some Interesting Performance About Computer Graphics"></a>Some Interesting Performance About Computer Graphics</h1> <br /><h2 id="常识1-放大模糊"><a href="#常识1-放大模糊" class="headerlink" title="常识1. 放大模糊"></a>常识1. 放大模糊</h2><p>有些图形怎么放大都不会模糊，有些则会</p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/12.png" alt="image.png"></p> <br /> <br /><h2 id="常识2-白色究竟是多少"><a href="#常识2-白色究竟是多少" class="headerlink" title="常识2. 白色究竟是多少"></a>常识2. 白色究竟是多少</h2><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/13.jpg"><br> <br /></p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/14.png" alt="279337218_m.jpg"></p> <br /> <br /><p>关键词：白平衡</p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/15.png" alt="image.png"></p> <br /><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/16.png" alt="image.png"></p> <br /> <br /><h2 id="常识3-奇怪的摩尔纹"><a href="#常识3-奇怪的摩尔纹" class="headerlink" title="常识3. 奇怪的摩尔纹"></a>常识3. 奇怪的摩尔纹</h2><blockquote><p>采样频率不够 —— 欠采样</p></blockquote><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/17.png" alt="image.png"></p> <br /> <br /><h2 id="常识4-难受的画面锯齿"><a href="#常识4-难受的画面锯齿" class="headerlink" title="常识4. 难受的画面锯齿"></a>常识4. 难受的画面锯齿</h2><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/18.jpg"><br />高智商：可爱的像素风</p> <br /> <br /><h2 id="常识5-奇怪的颜色过渡错误"><a href="#常识5-奇怪的颜色过渡错误" class="headerlink" title="常识5. 奇怪的颜色过渡错误"></a>常识5. 奇怪的颜色过渡错误</h2><p>图片中两个颜色的中间颜色变深了<br />同原理的问题：人眼中黑暗里1盏灯到10盏灯的敏感程度不同<br /><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/19.png" alt="image.png"><br /><a href="https://www.youtube.com/watch?v=LKnqECcg6Gw">https://www.youtube.com/watch?v=LKnqECcg6Gw</a></p> <br /><blockquote><p>据说人所能感受到的疼痛分为了10级，1级是被蚊子叮了，10级呢，是孕妇分娩。有人就问了，那什么是11级疼痛呢？答“11级疼痛就是孕妇分娩的时候被蚊子叮了”。</p></blockquote><br /><p><strong>现实世界有太多规律是非线性的，但人的认知逻辑下意识会觉得是线性的。</strong><br><strong>—— 比如对色彩的感知、比如对亮度的感知</strong></p><br /><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/20.png"></p> <br /><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/21.jpg"></p> <br /><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/22.jpg"></p> <br /><p>gamma 曲线<br /><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/23.png"><br />当年老式的CRT显示器内置 Gamma 2.35 左右<br />目前业内各家标准在 Gamma  2.2 左右<br />效果参考：<a href="https://color.viewsonic.com/zh-cn/explore/content/5%20%E7%A7%8D%E4%BC%BD%E7%8E%9B%E5%80%BC%E8%AE%BE%E5%AE%9A_4.html">https://color.viewsonic.com/zh-cn/explore/content/5%20%E7%A7%8D%E4%BC%BD%E7%8E%9B%E5%80%BC%E8%AE%BE%E5%AE%9A_4.html</a></p> <br /> <br /> <br /> <br /><h1 id="About-Rasterization"><a href="#About-Rasterization" class="headerlink" title="About Rasterization"></a>About Rasterization</h1><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/8.png"></p><h2 id="01-显示设备"><a href="#01-显示设备" class="headerlink" title="01 显示设备"></a>01 显示设备</h2><p><strong>示波器</strong><br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/25.png" alt="image.png"></p><p>示波器艺术<br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/26.png" alt="image.png"></p><p><a href="https://www.youtube.com/watch?v=rtR63-ecUNo">https://www.youtube.com/watch?v=rtR63-ecUNo</a></p> <br /><p><strong>经典 CRT 屏 （阴极射线显像管显示）</strong></p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/27.png" alt="image.png"></p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/28.png" alt="image.png"></p> <br /><p><strong>LCD 液晶屏</strong></p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/29.png" alt="image.png"></p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/30.jpg" alt="image.png"></p> <br /><p><strong>LED 液晶屏</strong></p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/31.png" alt="image.png"></p><p>发光二极管作为光源的液晶显示器<br>色彩区域、厚度、节能方面优于CCFL(冷阴极荧光灯)</p> <br /> <br /><h2 id="02-光栅化"><a href="#02-光栅化" class="headerlink" title="02 光栅化"></a>02 光栅化</h2><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/32.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (int x = 0; x &lt; xmax; ++x) </span><br><span class="line"> for (int y = 0; y &lt; ymax; ++y) </span><br><span class="line"> image[x][y] = inside(tri, x + 0.5, y + 0.5);</span><br></pre></td></tr></table></figure> <br /><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/33.png" alt="image.png"></p> <br /> <br /><h2 id="03-采样和走样-Sampling-And-Aliasing"><a href="#03-采样和走样-Sampling-And-Aliasing" class="headerlink" title="03 采样和走样 Sampling And Aliasing"></a>03 采样和走样 Sampling And Aliasing</h2><p>数字信号处理<br />频域</p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/34.png" alt="image.png"></p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/35.png" alt="image.png"></p> <br /> <br /><h2 id="04-反走样-Anti-Aliasing"><a href="#04-反走样-Anti-Aliasing" class="headerlink" title="04 反走样 Anti-Aliasing"></a>04 反走样 Anti-Aliasing</h2><p>滤波 Filtering<br /><br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/36.png" alt="image.png"></p> <br /><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/37.png" alt="image.png"><br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/38.png" alt="image.png"></p> <br /> <p>高通滤波 ↓<br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/39.png" alt="image.png"></p> <br /><p>低通滤波 ↓<br><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/40.png" alt="image.png"></p> <br /> <br /><h2 id="03-业内标准做法"><a href="#03-业内标准做法" class="headerlink" title="03 业内标准做法"></a>03 业内标准做法</h2><p>所有都是理想的近似解决方案</p><h3 id="SSAA"><a href="#SSAA" class="headerlink" title="SSAA"></a>SSAA</h3><p>全称：超采样反走样(Super Sampling AA)</p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/41.png" alt="image.png"></p><p>思路：<br />增加对原始画面点的采样频率以求得每个像素点上近似的覆盖率。<br />每个像素点有4个子采样点，对每个像素点的4个子采样点各着色1次（共4次），再把计算结果根据深度和覆盖信息保存到对应的子采样点，最后对4个采样点取均值作为最终的像素颜色；</p><p>开销：</p><ol><li>原始的算法会为像素点维护depth_buffer和color_buffer，n个像素点就分别对应n大小的数组，使用SSAA后，子采样点的深度和颜色也需要维护，所以depth_buffer和color_buffer的数组大小就扩充为2<em>2</em>n。</li><li>SSAA的计算复杂度也会增大，判定是否在三角形内、深度检测、计算着色的操作也会增多。</li></ol> <br /> <br /><h3 id="MSAA-★"><a href="#MSAA-★" class="headerlink" title="MSAA ★"></a>MSAA ★</h3><p>全称：多采样反走样(Multi-Sampling AA)<br /><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/42.png" alt="image.png"><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/43.png" alt="image.png"><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/44.png" alt="image.png"><br />思路：<br />优化 SSAA 计算量大的问题，包括但不限于</p><ol><li>使用低差异采样序列，比如 Halton 序列，Poisson disk 等</li><li>对每个像素点只在中心点着色一次</li></ol> <br /> <br /><h3 id="FXAA-★"><a href="#FXAA-★" class="headerlink" title="FXAA ★"></a>FXAA ★</h3><p>全称：快速近似反走样<br />属于<strong>后期处理反走样</strong>，在图像层面上做后期处理，通过算法识别边缘，然后以像素级别进行混合，而不是增加采样频率的思路。<br />相关的还有  SMAA、NFAA（仅模糊局部边界的边缘模糊算法）、SSXAA（仅模糊局部边界的边界模糊算法）、DLAA（自适应处理长边界抗锯齿算法）等技术。</p> <br /><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/45.png"><br />思路：<br />每个锯齿都是由连续的水平或竖直的锯齿边缘组成的，可以通过着色片段在锯齿边缘中的位置，就可以近似求出其落在原始边界内的比例。</p><p>关键步骤：</p><ol><li>检测边缘，如果该像素不包含边缘，不进行FXAA</li><li>检测边缘的朝向（水平、垂直）</li><li>判断当前像素位于边的哪一侧</li><li>从当前像素出发，向边缘的两端遍历，进行端点查找</li><li>根据端点的位置计算最终纹理采样坐标</li><li>结合额外的低通滤波</li></ol><p>优点是不需要增加采样点，不依赖硬件支持，进一步降低了计算量，缺点则是不仅会平滑三角形之间的边缘，还会平滑 alpha 混合纹理内的边缘，或由像素着色器产生的边缘，图像的高对比度细节会变得模糊。</p> <br /> <br /><h3 id="TAA-★"><a href="#TAA-★" class="headerlink" title="TAA ★"></a>TAA ★</h3><p>全称：时间性抗锯齿（Temporal AA）</p><p>对于连续的画面，通过motion vector保存每帧移动的偏移量，每个像素每帧只采样一次，但采样点在像素内的随机位置，再将前面帧中已有的采样的像素与在当前帧中采样的像素混合，得到最终的反走样图像。</p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/46.png" alt="image.png"><br />基于时间的反走样则是把采样点散布在帧序列（时间）里，这样单帧渲染的压力就明显减小</p><p><img src="https://liluhui.oss-cn-hangzhou.aliyuncs.com/assets/imgs/20221028/47.gif"><br />TAA缺点是当帧率低或者画面运动快的时候容易产生重影或者模糊。</p> <br /> <br /><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3> <br /><p>增加空间采样率的方式 SSAA、MSAA只适用于GBuffer生成阶段的抗锯齿，更适合于前向渲染。 —— 移动端游戏<br />延迟渲染则更推荐 FXAA、TAA 。 —— 单机大型游戏<br />也可以关注尝试下新兴的 深度学习类抗锯齿，如英伟达的DLAA。</p> <br /> <br /> <br /> <br /><h1 id="Referens"><a href="#Referens" class="headerlink" title="Referens"></a>Referens</h1><ul><li><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">https://sites.cs.ucsb.edu/~lingqi&#x2F;teaching&#x2F;games101.html</a></li><li><a href="https://developer.nvidia.com/gpugems/gpugems3/part-iv-image-effects/chapter-24-importance-being-linear">https://developer.nvidia.com/gpugems/gpugems3/part-iv-image-effects/chapter-24-importance-being-linear</a></li><li><a href="https://zhuanlan.zhihu.com/p/415087003">https://zhuanlan.zhihu.com/p/415087003</a></li><li><a href="http://www.empiricalimaging.com/2019/03/28/beta-release-of-micav2/">http://www.empiricalimaging.com/2019/03/28/beta-release-of-micav2/</a></li></ul> <br /> <br /> <br /> <br />]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%B8%B2%E6%9F%93/">渲染</category>
      
      
      
      <comments>https://blog.liluhui.cn/2022/10/28/Recognize-Graphics-And-Rasterization-Aliasing/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>反过来思考，反过来思考，还是反过来思考</title>
      <link>https://blog.liluhui.cn/2022/08/22/%E4%B9%A6%E8%AF%84-%E7%A9%B7%E6%9F%A5%E7%90%86%E5%AE%9D%E5%85%B8/</link>
      <guid>https://blog.liluhui.cn/2022/08/22/%E4%B9%A6%E8%AF%84-%E7%A9%B7%E6%9F%A5%E7%90%86%E5%AE%9D%E5%85%B8/</guid>
      <pubDate>Mon, 22 Aug 2022 12:54:05 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;2022-08 《穷查理宝典》书评&lt;/p&gt;
&lt;h2 id=&quot;00&quot;&gt;&lt;a href=&quot;#00&quot; class=&quot;headerlink&quot; title=&quot;00&quot;&gt;&lt;/a&gt;00&lt;/h2&gt;&lt;p&gt;《穷查理宝典》这本书中提到了很多芒格想传达的普世智慧，包括多元思维模型、人类误判心理学、能</description>
        
      
      
      
      <content:encoded><![CDATA[<p>2022-08 《穷查理宝典》书评</p><h2 id="00"><a href="#00" class="headerlink" title="00"></a>00</h2><p>《穷查理宝典》这本书中提到了很多芒格想传达的普世智慧，包括多元思维模型、人类误判心理学、能力圈、复利的力量、信任的策略，还有我在这篇文章中特别想反思的 —— <strong>逆向思维</strong>。<br><br/></p><p>芒格常用一句经典的话来表述这一观点 —— “<strong>如果我知道自己死在哪里，我就不会去那里。</strong>”</p><p>虽然这听起来像个笑话，谁会往明知自己会死的地方跑呢，这不就是“没什么用的正确的话”。但通过书籍来了解一个人的好处是，你可以从他的事迹中找到细节，找到他是如何践行所说的人生智慧的，而这句话背后想要传达的不仅是“不去”，而是我们容易忽略的“哪里”。我们真的认真思考和罗列过自己最可能会死在哪里吗？反正我没想过…<br><br/></p><h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><p>当然，这是一个刺激的点，我们有更多遍布生活之中的问题非常适合逆向思想。比如，希望过上幸福的人生，希望事业长青，希望投资盈利。就拿变得幸福来说吧，我们有太多可以做的事情来变得幸福了，找到匹配的伴侣、拥有宜居的环境、阶段性的发点小财… 我们能列出一整本本子，有眼下清晰地想要获得的东西，也有模糊的愿景，很多很多。但这些依然不能保证我们幸福，因为我们在不断地做加法，却没有对突然而至的减法做预防方案。想象人生的初始幸福指数是 60分，或许吧，我觉得是90分，只要不产生严重的负向，就已经可以持续幸福了，在此基础上再前进一点点分数都是幸运。—— 这就是芒格说的，要想得到人生幸福的秘籍，就是去避免那些让人生变得痛苦的事情。</p><br/><p>芒格在一次演讲中给出了<strong>过上痛苦人生的七味药</strong>，这真是个独特的视角</p><p><strong>1. 为了改变心情或感觉而使用化学物质</strong><br>从在某些时刻无法控制自己，到完全由化学物质引导着自己行动，我们将很快丧失人生的控制权。</p><p><strong>2. 妒忌和怨恨</strong><br>长久地陷入在痛苦的情绪中，由着这些痛苦的情绪生长，让前行的路变得污秽，人生路途驶向阴暗和幽闭的小路，先不说是不是惩罚了别人，但一定是惩罚了自己。</p><p><strong>3. 反复无常</strong><br>什么都做，也什么都没做好，人生路上前进一小段就掉头，总是在往返和横跳，多少自我优势都能在时间长河下被挥霍一空。</p><p><strong>4. 加强固有认知，不再广泛地吸收知识</strong><br>不再从他人的成功或失败中吸收经验，沉浸在自己的认知世界里，不信那些死人谷。</p><p><strong>5. 任由苦难吞噬自己</strong><br>在遭遇严重苦难后一蹶不振，任由意志消沉，成为命运的奴隶，被动着接受一切。</p><p><strong>6. 减少客观性</strong><br>不思考、不自省，就没有办法推翻自己，没有办法在思考的过程中丰富一个观点，就不存在真正拥有一个观点，混乱又没有办法找到人生的脉络，稳步踏上通往无知的道路。</p><br/>你看，逆向思维的魅力，就是理清那些 not work 和 bad work，那么剩下的就像滚轮一样 work 了起来 ~<p><strong>避免失败让我们走向成功，避免愚蠢让我们变得出色。</strong></p><p>反过来思考，就是去抓住“不是什么”的点，虽然直觉上我们总是在追寻“是什么”，但是思考”不是什么“反而能更清晰的划定边界。去放下什么，才更能去聚焦重要的是什么，这也是一种思维的聪明策略。逆向思维很像一种理性的热爱，就是那种真正热爱和投身于某一事务的人们，他们天然有一种聚焦自己应该做什么的能力。但大多数人，普通的我们，有太多的兴趣爱好，有太多的知识想要学习，有太多功能想要堆叠到产品上，我们非常需要逆向思维这样的工具。</p><br/><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><p>同时，我也想聊聊现实，谈谈逆向思维的<strong>“难”</strong>。</p><p>首先，也是最重要的，<strong>逆向思维不符合直觉，不符合人类常规的思考方式。</strong>我们是顺逻辑的思维，即 A 导致 B ，B 导致 C 这样的顺序因果关系才是最容易思考和理解的，我们在生活中也不断地在使用和强化正向的逻辑思想，所以在遇到问题的当下，不是不想用逆向思想，而是根本想不到逆向思维，正向思考就是会自然而然发生的。所以，我们需要很长的时间来训练，需要一个又一个的问题让它停下来，有意地换着法子思考，安静下来，给自己时间。</p><p>第二点，<strong>我们也很喜欢捷径。</strong>30天学会xxx、7天搞定xxx、跟着xx学投资… 我们喜欢成功案例，喜欢跟着别人的成功路径走，因为我们真的觉得复制别人的成功就有更大的概率成功，但其实是 避免了失败的关键点才让我们慢慢成功。</p><p>第三点，<strong>我们也不喜欢面对放弃和背后的消极情绪。</strong>逆向思想的过程其实是直面焦虑、压力、甚至痛苦的，当我们想要定义不是什么的时候，其实脑海中的选项不是广袤天地的所有选项，而是曾经出现在脑海里的想法，我们不得不立刻面对自己的想法。当我们坐在书桌前，开始写下”不“，这里每一条都是脑海里或许觉得不靠谱、或许觉得没想明白、或许觉得抛不下的点，这个过程其实很像心理学认知行为疗法不断刨析和了解自己的过程，直面自己的无知、直面自己的偏见、直面自己的情绪、直面自己的价值观。</p><p>所以，逆向思维虽然是个 powerful 的工具，却也更像一把厉害的武器，如果我们想要得到它，我们就需要让自己配得上它。<br><br/></p><p>希望我们都能成为更好的自己。</p><br/><br/>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%80%9D%E8%80%83/">思考</category>
      
      
      
      <comments>https://blog.liluhui.cn/2022/08/22/%E4%B9%A6%E8%AF%84-%E7%A9%B7%E6%9F%A5%E7%90%86%E5%AE%9D%E5%85%B8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>有效可以学会，有效也必须学会</title>
      <link>https://blog.liluhui.cn/2022/07/31/%E4%B9%A6%E8%AF%84-%E5%8D%93%E6%9C%89%E6%88%90%E6%95%88%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85/</link>
      <guid>https://blog.liluhui.cn/2022/07/31/%E4%B9%A6%E8%AF%84-%E5%8D%93%E6%9C%89%E6%88%90%E6%95%88%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85/</guid>
      <pubDate>Sun, 31 Jul 2022 03:37:28 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;2022-07 《卓有成效的管理者》书评&lt;/p&gt;
&lt;h2 id=&quot;00&quot;&gt;&lt;a href=&quot;#00&quot; class=&quot;headerlink&quot; title=&quot;00&quot;&gt;&lt;/a&gt;00&lt;/h2&gt;&lt;p&gt;这本书的书名，让人有点讨厌，又是「卓有成效」、又是「管理者」，似乎透露着一股精英主义</description>
        
      
      
      
      <content:encoded><![CDATA[<p>2022-07 《卓有成效的管理者》书评</p><h2 id="00"><a href="#00" class="headerlink" title="00"></a>00</h2><p>这本书的书名，让人有点讨厌，又是「卓有成效」、又是「管理者」，似乎透露着一股精英主义的成功学气息，光看名字实在让人没有第一眼的好印象。好在书名不会埋没好书，经典的生命力是顽强的，吸引人的书名为它带来读者，好的内容又帮它沉淀和流传，这已经是一本出版 55 周年的作品了，半个世纪的智慧，在当代的组织发展中依然有效，对于每一个参与工作的人来说都是值得参阅和思考的。它只不关乎卓有成效，也只不关乎管理者，书名只不过是个噱头。</p><br /><h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><p><strong>这本书不是在说「卓有成效」，而是在说「有效」</strong><br><br /></p><p>「有效」是什么？ 我们需要先对「有效」有个定义，这种时候我们虽然不能一下子定义出是什么，但我们可以从思考和得出不是什么而逐步接近它的含义。</p><p>第一，「有效」不是「有效率」。<br />有效率是把一件事做的很快、甚至是又快又好，但这当然不粗暴的等同于有效。我记得这样一个故事，三个工人挖路埋线，一个负责挖开、一个负责埋线、一个负责埋土，每个人专精自己的部分，充分提高效率，有一天负责埋线的工人请假了，但是另外两人虽然知道，也依然如火如荼的工作着，完成着他们的工作指标。这个故事里，显然这样的结构设计追求了效率，但却完全忽略的有效，这个故事虽然看起来很离谱，但我们不妨会想一下，我们身边真的有很多竭尽全力让自己陷于忙碌中的人，仅仅用数量和时间来描述自己所做的工作。</p><p>第二，「有效」不是「有产出」<br />我们大多数人都是靠专业特长、某几项技能作为输入去产出的，可能是一段代码、可能是一个零件、可能是一篇内容，但当代社会上真正对于他人、对于社会有所用的东西，是需要多项能力的产出依赖、合作、竞争才会产生的，也就是我们说的社会价值。它很难完全依靠一个人的产出产生，也很难依赖一个人来加强价值。这也是为什么企业、组织、小团体会更具有社会价值贡献的能力。<br />在这里，我想说的是，不要让自己的产出被埋没，不是我不太想宣传、营销自己的产出，而是我有责任让我的产出被看见。不要抱有天真的幻想，我的作品很好，一定会被人看见，被人们喜爱。不是的，那是一种幸运，幸运也需要自己创造，我们应该好好包装它，期待自己的产出能帮到别人，哪怕它只是其中的一小环，我们也参与到了一个真正有效的建设中。</p><p>我认为，有效就是有价值，是那些真正有用且被用的成果。对于一个组织来说，就是追求社会价值；对于一个组织成员来说，就是追求最终绩效。</p><p>书中提到过一个德鲁克老爷很喜欢的小故事：有三个石匠，人们问他人在干什么。<br />第一个说：“我在养家糊口。”<br />第二个说：“我在干全国最漂亮的石匠活儿。”<br />第三个说：“我在建筑大教堂。”</p><p>在这里，第一个将注意力放在自己的小家，第二个将注意力放在自己的能力，只有第三个在追求有效。<br />当然这个故事我觉得很多人听来会倒果为因，觉得哎呀那我以后工作就得这么想，我必须把自己的抱负、目标说的很大才行，得把自己包装的“有格局”。这绝不是这本书想要达成的，它想做的是希望每一个知识管理者都打从心底里认可为有效负责，投身于建设成果之中。我想补充的是，这种投身、利他精神绝不是一朝一夕的观念改变，从强大的自我世界和自恋中抽身而出是很多人一生的课题。我们更应该实诚地对待自己，从学习和实干开始，尝试投身于贡献中，也要面对自己的贪念、自己的错误，并从中不断地学习和前往向往的精神世界。我们不可能瞬间抵达，只是空喊口号也不过是麻痹自我，我们能做的不过是进一步有进一步的收获。</p><br /><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><p><strong>这本书不是写给「管理者」的，而是写给每一个可以成为「知识工作者」的人</strong><br><br /></p><p>管理者是什么，管理者是需要思考和作出决策的人，ta 决定某个目标如何行动、某个决策如何取舍。其实知识工作者也是一样的，只不过他们的影响范围大小有所不同。书名选择用「管理者」而不是书中更多提到的「知识工作者」或许也是想筛选出真正有意愿去思考和作出决策的人。</p><p>知识工作者可以成为管理者，也可以沦为体力劳动者，区别是什么呢？<br />陷入纯粹的忙碌中，即使一个利用自己学识产出成果的人也会变为体力劳动者，一直鞭笞着自己干活，不说主动思考，甚至是刻意回避很多思考和责任。反过来说，任何一个世俗意义上的体力劳动者，也可以变为知识工作者，但 ta 确实需要更刻意去抽离去思考自己所处的角色和事情，不断为局部建设共享想法和实施创新。<br />对于追求有效来说，每一个知识工作者都应该在成长的过程中逐步变为一个管理者。这意味着我们不但要在当下精进技能，还需要认识和提问我们所处的环境，去挖掘机会，去参与到组织价值创造的过程中。</p><br /><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><p>这本书从有效出发，通过各种故事向读者打开一个关于认识有效、觉察有效的世界。其中提到了我们如何去发现和管理自己的时间，我们如何取舍和聚焦重要的事情，我们如何发展和连接不同人的优势，我们如何促进组织的有效性，我们如何做出真正有效的决策 等等等等，德鲁克老爷多年的经验和智慧的一角被浓缩在这本书中，每一点都值得我们参阅和试验，下面为就小谈几点对我而言更有启发的要素。</p><br /><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><p><strong>喂饱机会，饿死问题</strong><br><br /></p><p>任何组织内部活动都会不断的产生问题，问题是必须得拿出来说明白，不能藏着掖着，但不论问题多么必要，解决问题都不能创建成果，更多是防止损失，只有充分利用机会，才能产生成果。换句话说，问题当然要解决，但绝不能是组织成长阶段的核心，除非这个问题能转化成机会。</p><p>明确聚焦于机会下，组织策略也需要调整。人才匹配更应该把绩效最突出的人放在把握机会上，而不是让他们解决眼前的困难问题，尤其是不致命的麻烦问题。围绕机会用人可以参考日本大企业的常规做法，要求管理团队的每个成员每六个月编制出两份清单，一份是全公司的机会，另一份是全公司绩效最突出的员工，讨论后将两份清单合并，把最好的人和机会做匹配。</p><p>挖掘机会需要觉察力，把组织内外的变化当作可能的机会来考虑，多想一下，“怎么才能把这些变化用作企业发展的契机？”，包括友商的动作产生的某些成功或失败，行业上新出现或消失的流程、产品、服务等，行业或市场产生的结构变化，相关用户群体的思维模式、价值观、感知等的变化 …</p><p>有效的组织需要机会高于问题，用最突出的人去探索机会，思考变化如何转化为机会而不是被动接受的威胁。</p><br /><h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><p><strong>延迟任务的勇气</strong><br><br /></p><p>影响聚焦去做重要的事情的，还有我们不敢果断地延迟任务。延迟任务几乎就意味着放弃这件事情，很多“不得不做”的事情，恰恰是因为眼下的机会最好，时间窗口摆在这，如果我不做，那么别人就做了，如果我不做，我就没有先发优势，降级处理这个事，却可能成为对手的重大胜利。我们害怕这种机会的错失，就像冲浪时来的一道大浪，它看起来这么大这么好，但是自己的位置其实不太巧，但是总归可以去抓每一道眼前的浪，就是忍不住，不敢放下这个机会。</p><p>延迟任务还意味要得罪人，我们的任务通常是作为别人的上游依赖，或是下游产出，对我们来说重要性不高的事，却可能对别人来说极其重要，我们对它降级，就会惹来别人的催促和不满，这些“眼前”的人很容易动摇我们的决定。</p><p>四象限优先级什么的，告诉我们要去区分重要的事情和紧急的事情，但是没有告诉我们什么是重要、什么是紧急，紧急的事情真的紧急吗，它们真的非做不可吗，这是需要质疑的。最舒服的状态，就是列出一个完美的清单，每个事情都去做一点、推进一点，但这就是会导致在重要的事上我们远离有效、陷于忙碌。</p><br /><h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><p><strong>找到问题的共性</strong><br><br /></p><p>社会生活和政治生活当中有一个很突出的现象：临时性的事物会长期存在。总是有很多特例情况需要临时的解决方案，人们匆匆制定出一个方案来应急，而这些纷纷嚷嚷的事件事实上只是“症状”，不是真正的问题。有效决策者应该总是问自己：“如果这样的方案将伴随我的生活很久，我还愿意吗？”。如果这个问题是否定的，我们就应该继续思考，寻找更加普适的、更全面的解决方案。</p><p>最常见的错误就是，把共性问题当成了一连串的特例对待，既没有对于根本性问题的理解，也没有确立处理的原则，便总是对每个特例问题出台临时方案来搞实用主义，看似修补了一个问题，但长期下来总有问题不断产生，还因为各种修补动作而变得臃肿。</p><p>还有需要警惕的，就是我们也会定义错误共性问题，思考的结果也可能是一知半解，在此基础上做出的决策行动反而会损害成果，所以我们必须得更多的思考和不慎求解。</p><p>总之，我们要明白真正的特例是很少的，做出有效决策的首要关键就是提出问题：“这是共性问题，还是例外情况？”</p><br /><h2 id="07"><a href="#07" class="headerlink" title="07"></a>07</h2><p><strong>沉默的专业知识</strong><br><br /></p><p>专业人才的产出本质上是一个片段，而不是果实。我们有责任让自己的产出被看到、被理解、被使用。但现实是，很多专业知识的对外材料，不论是文字、演讲，都让人根本听不懂，不明白我能用它来做什么，听上去更像是一场苦难汇报，为了做出这把绝妙的武器都跑了哪些地方、经历了什么大坑，有时候听了一堆，但是这把武器究竟是个什么完全没有被理解。</p><p>好的专业知识产出是谦逊的，它会想尽办法拉齐于受众的语言体系和知识储备，首先表达自己的可能用途、可能风险，甚至包括希望如何发展，然后才是核心原理、细节内容。</p><p>我们得了解一个事实，大多数的专业知识是沉默的，充分利用它们也不过为整个成果打通了一点关键，而那些了不起的专业知识是很少的，即使写得晦涩，因为痛点需求量大、又或是曾经被某个人使用撬动了杠杆效应而有更多的使用。<br />作为产出构想、信息和概念的知识工作者，绝大多数时候能做的就是为成果攻克一个个的小点，在这过程中，硕大的果实某种程度上是不可知的，不能永远追寻可见最大效益的事情去做。</p>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%80%9D%E8%80%83/">思考</category>
      
      
      
      <comments>https://blog.liluhui.cn/2022/07/31/%E4%B9%A6%E8%AF%84-%E5%8D%93%E6%9C%89%E6%88%90%E6%95%88%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UE实时渲染基础4 - 光照</title>
      <link>https://blog.liluhui.cn/2022/07/26/%E5%85%89%E7%85%A7/</link>
      <guid>https://blog.liluhui.cn/2022/07/26/%E5%85%89%E7%85%A7/</guid>
      <pubDate>Mon, 25 Jul 2022 16:07:12 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;00-前言&quot;&gt;&lt;a href=&quot;#00-前言&quot; class=&quot;headerlink&quot; title=&quot;00 前言&quot;&gt;&lt;/a&gt;00 前言&lt;/h2&gt;&lt;p&gt;关键词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static Lights 静态光照&lt;/li&gt;
&lt;li&gt;Dynamic light</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="00-前言"><a href="#00-前言" class="headerlink" title="00 前言"></a>00 前言</h2><p>关键词</p><ul><li>Static Lights 静态光照</li><li>Dynamic lights 动态光照</li></ul><br/><p>看完本篇内容你将对以下概念心中有数：</p><ol><li>什么是静态光照，什么是动态光照</li><li>光源的移动性是什么意思，为什么区分出 Static（静态）、Stationary（固定）、Movable（可移动）</li><li>光照系统下的性能优化</li></ol><br/><img src="/2022/07/26/%E5%85%89%E7%85%A7/1.jpg" class="" title="img"><br/><br/><h2 id="01-静态光照"><a href="#01-静态光照" class="headerlink" title="01 静态光照"></a>01 静态光照</h2><p>首先说明的是，光照在渲染中和反射一样是很昂贵的，光照不是只是指把对象照亮，而是呈现出物体间的错综复杂的阴影关系，对于所有渲染引擎来说，都是能先预计算就预计算，尽可能减少真正在实时部分的计算。</p><br/><p>静态光照是指需要在程序运行前进行构建，且在运行时不会发生任何位置、强度、色彩等改变的光照。直观来说，它就是在运行时静态的光源，比如稳定输出光的白炽灯，而不是忽明忽暗的火苗。</p><p>在静态光照的实现中，会进行预计算把光照结果存储在光照贴图中，最终被烘焙进纹理里。从这个意义上来说，我们看到的一切都不是真正的光照，而是把光照结果贴进一个个对象切面的障眼法。</p><br/><p>我们参考下图的过程，</p><p>一个立方体受到两束光（图一），预计算会生成<code>光照贴图</code>（图二），在后续过程中将光照贴图和<code>纹理</code>（图三）混合，最后得到带有光照效果的画面。<br /></p><img src="/2022/07/26/%E5%85%89%E7%85%A7/2.png" class="" title="img"><br/><p>UE 实现了一套独立的 <a href="https://docs.unrealengine.com/4.27/zh-CN/RenderingAndGraphics/Lightmass/">LightMass</a> 系统用来处理整个光照贴图的生成过程，其中涉及到漫反射、高光反射、遮挡等复杂的问题。LightMass 中会缓存整个体积空间的间接光信息，通过在体积内建立一个个密集的小点，缓存下在每个点上的间接光信息，最终的光照贴图计算出来可以有丰富的层次。</p><p>ILC 缓存采集密度在 World Settings 下的 Volume Light Sample Placement 可以设置。</p><img src="/2022/07/26/%E5%85%89%E7%85%A7/3.png" class="" title="img"><br/><p>静态光照的优势是性能快，因为复杂的光照计算都在开发环境构建好了；同时它带来的问题是很占内存，本质上它就是一张纹理，这也意味着它的分辨率是有上限的，如果是巨型模型很容易缺乏足够的光照贴图UV空间，最终该模型的光照效果很粗糙。</p><p>如果对默认的呈现想要调节参数，可以在<code>后期体积/PostProcessVolume</code>中找到 <code>Light Propagation Volume</code>这块，还有每个 <code>actor</code> 下找到 <code>LightMass</code> 也有更针对配置 。<br /></p><img src="/2022/07/26/%E5%85%89%E7%85%A7/4.png" class="" width="560"><br/><p>我们可以在 World Settings 中查看生成了多少光照贴图，不过我们不能改动。</p><img src="/2022/07/26/%E5%85%89%E7%85%A7/6.png" class="" width="280"><br/><h2 id="02-动态光照"><a href="#02-动态光照" class="headerlink" title="02 动态光照"></a>02 动态光照</h2><p>了解了静态光照我们就可以想到，动态光照有如它的名字一样，光源会被改变、被移动、被显示和隐藏，所以这类光源没有办法像静态光照一样预先计算好，而是要采用 GBuffer 图像来实时计算光照混合。</p><br /><p>以一个单一光源的简化案例来窥探动态光照的计算过程，</p><p>首先需要深度通道，即摄像机到每个几何体的距离，混合上光照的色彩和强度；</p><img src="/2022/07/26/%E5%85%89%E7%85%A7/7.png" class="" title="img"><p>然后混合法向量图像；</p><img src="/2022/07/26/%E5%85%89%E7%85%A7/8.png" class="" title="img"><p>最后混合上阴影图像。</p><img src="/2022/07/26/%E5%85%89%E7%85%A7/9.png" class="" title="img"><br /><p>对于动态光照来说，侠义上的光照本身的性能损耗还挺低的，上图的最后一步的阴影计算才是性能损耗的大头，阴影的计算在像素着色器上要复杂的多，这也意味着，屏幕中占比越大的动态光照阴影，性能损耗就越大。</p><br /><p>由于动态光照的复杂性，针对不同的场景 UE 提供了不同的工具来实现动态光照的阴影，包括</p><ol><li>Regular Dynamic Shadow 常规动态阴影 </li><li>Per Object Shadows 逐对象阴影&#x2F;固定光源阴影</li><li>Cascaded Shadow Maps（CSM） 级联阴影地图</li><li>Distance Field Shadows 距离场阴影</li><li>Inset Shadows 插图阴影</li><li>Contact Shadows 接触阴影</li><li>Cupsule Shadows 胶囊体阴影</li></ol><br /><p><strong>Regular Dynamic Shadow 常规动态阴影</strong> </p><p>光源移动性设为 Movable 时默认采用，它的特点是阴影非常清晰锐利、没有反射光照、没有辐射&#x2F;全局光照等效果，显得很“硬”。当然通常在最终呈现里，由于其他静态光源的存在，会和光照贴图混合最终成像稍软化一些。</p><br /><p><strong>Per Object Shadows 逐对象阴影&#x2F;固定光源阴影</strong></p><p>光源移动性设为 Stationary 时默认采用，它的特点时阴影丰富柔和、有反射光照、有辐射&#x2F;全局光照等效果，技术上混合使用了光照贴图的静态光照和动态光照。可以说在三种光源移动性中，固定光源拥有最高品质、中等可变性和中等性能成本。</p><img src="/2022/07/26/%E5%85%89%E7%85%A7/10.jpg" class="" title="img"><br /><p><strong>Cascaded Shadow Maps（CSM） 级联阴影地图</strong></p><p>实现将视锥划分成一系列基于距离的阴影级联，当离摄像机越远，每个级联的分辨率就越低。 这意味着，距离玩家视野最近的阴影分辨率最高，而距离最远的阴影分辨率最低。 超出 动态阴影距离（Dynamic Shadow Distance） 后，系统将重新采用静态烘焙阴影，通过这种方式，呈现出阴影淡入淡出平滑过度的效果。</p><img src="/2022/07/26/%E5%85%89%E7%85%A7/11.jpg" class="" title="img"><p>仅适用于 <code>定向光源/DirectionalLight 且设为 固定光源</code> 的情况 ，但注意不适合用在特别开阔的大场景下。</p><p>设置和调节操作见 <a href="https://docs.unrealengine.com/4.27/zh-CN/SharingAndReleasing/Mobile/Lighting/HowTo/CascadedShadow/">使用级联阴影</a></p><br /><p>观察下图1为静态光照，图2为配置 CSM</p><img src="/2022/07/26/%E5%85%89%E7%85%A7/12.jpg" class="" title="img"><br /><p><strong>Distance Field Shadows 距离场阴影</strong></p><p>特别适合不需要太精准的长距离阴影，高性能、低效果。适用于远处的阴影，比如一条很开阔很长的马路上的远方阴影。</p><p>默认是关闭的，在 <code>Project Settings</code> &gt; <code>Generate Mesh Distance Field</code>勾选开启。再在需要设置该效果的光源 <code>Details</code> 面板下配置<code>Distance Field Shadows</code>相关参数。</p><img src="/2022/07/26/%E5%85%89%E7%85%A7/13.png" class="" title="img"><br /><p><strong>Inset Shadows 插图阴影</strong></p><p>和 <code>Per Object Shadows 逐对象阴影/固定光源阴影</code> 是一回事</p><br /><p><strong>Contact Shadows 接触阴影</strong></p><p>适合细微细节的阴影，用来精细化特定模型的阴影。</p><p>同样的石面，左侧未开启接触阴影，右侧开启接触阴影</p><img src="/2022/07/26/%E5%85%89%E7%85%A7/14.jpg" class="" title="img"><br /><p><strong>Cupsule Shadows 胶囊体阴影</strong></p><p>简单粗粒度、损耗很低的阴影体效果，用对象的胶囊体计算阴影而不是对象自身的面。</p><img src="/2022/07/26/%E5%85%89%E7%85%A7/15.png" class="" width="500"><br /><br/><h2 id="03-光源移动性"><a href="#03-光源移动性" class="headerlink" title="03 光源移动性"></a>03 光源移动性</h2><p>基于上面关于静态光照和动态光照的内容，我们再来理解 UE 提供的移动性就清楚多了。</p><p><code>静止</code>的光源表示完全采用静态光照，要求是光源不能在运行时发生任何变化，性能最佳，效果中等；</p><p><code>固定</code>的光源表示采用静态光照和动态光照的混合，要求是光源在运行时位置不能发生变化，性能中等，效果最佳；</p><p><code>移动</code>的光源表示主要采用动态光照，光源可以任意移动和改变，性能最低，效果最低。</p><br/><p>在以上的原则下，UE 提供了 级联阴影地图、距离场阴影、接触阴影、胶囊体阴影的手段给开发者去针对性提升效果和降低损耗。</p><br/><br/><h2 id="04-优化指南"><a href="#04-优化指南" class="headerlink" title="04 优化指南"></a>04 优化指南</h2><ol><li>为关卡添加 <code>LightmassImportanceVolume</code> ，告知必要的光照计算范围，减少全场景 LightMass 计算的浪费。</li></ol><img src="/2022/07/26/%E5%85%89%E7%85%A7/16.png" class="" width="680"><ol start="2"><li>检查静态光照贴图的分辨率，不重要的地方应该减少分辨率，重要的地方适度提高。<ol><li>位于 视图模式（View Modes）&gt; 优化视图模式（Optimization Viewmodes） &gt; 光照贴图强度（Lightmap Density）</li><li>格子越大分辨率越低，避免非必要对象出现红色，比如很远的地方却用很高的分辨率的光照贴图，以绿色及以下性能为佳</li></ol></li></ol><img src="/2022/07/26/%E5%85%89%E7%85%A7/17.jpg" class="" width="680"><ol start="3"><li>合理优化缩小光源的影响范围<ol><li>下面这个例子 左边 和 右边 呈现的效果是一样的，但它们实际的影响范围和衰减半径不同。在这个例子中，左边 的光源要消耗性能更多，最佳实践是永远不要为看不见的效果付出代价。</li></ol></li></ol><img src="/2022/07/26/%E5%85%89%E7%85%A7/18.png" class="" width="680"><img src="/2022/07/26/%E5%85%89%E7%85%A7/19.png" class="" width="680"><ol start="4"><li>结合不同的手段开启或关闭、参数的配置达成性价比更高的光照阴影，包括但不限于  级联阴影地图、距离场阴影、插图阴影、接触阴影、胶囊体阴影<ol><li>多尝试多测试，抓大放小，不需要的内容关闭阴影</li><li>这几项手段的细节见前文 静态光照 和 动态光照</li></ol></li><li>关注大型对象的面数和光照贴图分辨率，防止光照贴图空间不足，有需要适当拆解大对象或采用胶囊体阴影</li></ol><br/><h2 id="100-相关资料"><a href="#100-相关资料" class="headerlink" title="100 相关资料"></a>100 相关资料</h2><ul><li><a href="https://docs.unrealengine.com/5.0/zh-CN/static-light-mobility-in-unreal-engine/">静态光源的移动性</a></li><li><a href="https://docs.unrealengine.com/4.27/zh-CN/RenderingAndGraphics/Lightmass/">CPU Lightmass全局光照</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%B8%B2%E6%9F%93/">渲染</category>
      
      
      <category domain="https://blog.liluhui.cn/tags/UnrealEngine/">UnrealEngine</category>
      
      
      <comments>https://blog.liluhui.cn/2022/07/26/%E5%85%89%E7%85%A7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UE实时渲染基础3 - 反射</title>
      <link>https://blog.liluhui.cn/2022/07/24/%E5%8F%8D%E5%B0%84/</link>
      <guid>https://blog.liluhui.cn/2022/07/24/%E5%8F%8D%E5%B0%84/</guid>
      <pubDate>Sun, 24 Jul 2022 03:45:43 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;关键词：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reflections Captures 反射捕获&lt;/li&gt;
&lt;li&gt;Planar Reflection</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关键词：</p><ul><li>Reflections Captures 反射捕获</li><li>Planar Reflections 平面反射</li><li>Screen Space Reflections   SSR 平面空间反射</li></ul><p>看完本篇内容你将对以下概念心中有数：</p><ul><li>UE4 有哪些反射技术，我们如何选择和组合</li><li>反射系统下的性能优化</li></ul><img src="/2022/07/24/%E5%8F%8D%E5%B0%84/1.png" class="" title="img"><br/><h2 id="反射的实现思路"><a href="#反射的实现思路" class="headerlink" title="反射的实现思路"></a>反射的实现思路</h2><p>首先，对象能产生反射的前提是材质具有一定的光泽度。在UE4中，我们调整材质的 Metallic（金属感）、Specular（高光度）、Roughness（粗糙度）三个维度的参数来调整对象的光泽度，具体材质调整查看 <a href="https://docs.unrealengine.com/4.27/zh-CN/RenderingAndGraphics/Materials/HowTo/ShinyMaterials/">此文档</a>。</p><p>真实世界里的反射是很难实现的，想象一下每个点产生的反射，整个世界都需要重新进行一次计算，即使只是两个反射对象和一束光，也会产生无数反射光，重复计算量非常之大，这对于现代硬件来说成本太大了，所以渲染引擎实际是通过一种 hack 的方式实现的，而不是像真实世界一样那么复杂。这意味着，很多时候渲染出的反射是不精准的，我们需要通过组合方案和调整参数达到适当的效果，也意味着可以脱离真实世界的“正确”去做艺术性的表达。</p><p>UE中所有的反射方式大致归为两类，第一类是实时计算，通过屏幕的深度和颜色缓存来计算；第二类是预计算，通过提前捕获计算出一个360°的图片，在实时渲染中再混合图像。<br />第一个就是我们常听说的 <code>SSR 屏幕空间反射</code>，第二种就是我们在 actor 中会看到的反射工具们，下面我们将展开讲讲。<br /></p><img src="/2022/07/24/%E5%8F%8D%E5%B0%84/2.png" class="" width="200"><br/><h2 id="SSR-屏幕空间反射"><a href="#SSR-屏幕空间反射" class="headerlink" title="SSR 屏幕空间反射"></a>SSR 屏幕空间反射</h2><p>这是UE4 默认启用的反射，在后期处理体积（PostprocessVolume）内可以调节参数<br /></p><img src="/2022/07/24/%E5%8F%8D%E5%B0%84/3.png" class="" title="img"><p>屏幕空间反射正如它的名字一样，它是采集屏幕范围内可见对象进行计算，而不是整个世界的信息，这就导致它会出现一些视觉错误。</p><p>比如在我们现在这个场景内，我们能看到圆锥体上捕获的反射有地上的蓝字和人物，但当我们走进，篮字超出屏幕范围时，这部分反射就丢失了。<br /></p><img src="/2022/07/24/%E5%8F%8D%E5%B0%84/4.png" class="" title="img"><img src="/2022/07/24/%E5%8F%8D%E5%B0%84/5.png" class="" title="img"><img src="/2022/07/24/%E5%8F%8D%E5%B0%84/6.png" class="" title="img"><p>这就意味着 SSR 只能反射当前可见的内容。另外 SSR 的问题是反射产生的画面噪点也很多，尤其是反射区和空白区之间的过渡。</p><p>总的来说，SSR 是相对昂贵的，只要不在提前捕获反射的区域内，这部分就会采用 SSR 来实现反射。当然，SSR 也有优点，它不需要像反射捕获去调节位置避免混合出的图像偏离常识，它的计算是精准的，位置关系始终正确。</p><p>我们应该将 SSR 作为全局的兜底，保证始终有反射的保底质量，通过下文的各种反射捕获手段调节出效果更好、性能也更好的反射。</p><br/><h2 id="反射捕获"><a href="#反射捕获" class="headerlink" title="反射捕获"></a>反射捕获</h2><p>包括 球体反射捕获 Actor（Sphere Reflection Capture Actor）和 立方体反射捕获 Actor（Box Reflection Capture Actor）。</p><p>这两者本质上都是通过在摆放 actor 的位置捕获一张 360°的图像记录这个点的反射信息。区别是大多数场景使用球体都是合适的，但在一些方正的空间例如房子下，角落的投影会产生一些畸变，这时候换成立方体捕获出来的画面更合理。</p><p>这里需要关注几点，</p><ol><li>捕获是由范围的。你可以通过一个个小的范围做出效果，也可以采用大的范围做出效果，也可以混合使用。<ul><li>在捕获效果的呈现上，包含关系的捕获点会被子节点接管，意思是如果有一个很大范围的捕获球，其中又包含了一个小捕获球，那么小捕获球范围内的反射是完全被小范围捕获球接管的；</li><li>而如果有两个捕获球产生了交集，在交集的范围内，则会同时混合两个捕获结果。 —— 需要关注不要重叠太多太多，实时渲染的混合过程就会比较损耗了，最佳实践是不要超过8个，当到达20-40个的数量左右重叠计算压力很大。</li></ul></li></ol><img src="/2022/07/24/%E5%8F%8D%E5%B0%84/7.png" class="" title="img"><ol start="2"><li>捕获球的摆放位置会影响效果。因为最终是混合这个拜访点采集的反射画面信息，在混合的时候是可能出现不符合物理常识的位置错位的。<ul><li>需要反复检查呈现效果调节，大多数时候都是摆放在视口的高度，就是摄像机&#x2F;玩家视角的高度上。</li></ul></li></ol><br/><h2 id="平面反射"><a href="#平面反射" class="headerlink" title="平面反射"></a>平面反射</h2><p>平面反射并不常用，它对应着 平面反射 Actor （Planar Refloction Actor），适用于需要精准反射效果的平滑表面，但又不适用于特别大范围的情况。具体来说，它很适合镜子、局部的水面，但不适合大片的海面。</p><p>第一张是采用默认的 SSR 产生的反射效果，第二张是用平面反射处理的反射效果，第二张的细节很真实性明显要更好。<br /></p><img src="/2022/07/24/%E5%8F%8D%E5%B0%84/8.jpg" class="" title="img"><img src="/2022/07/24/%E5%8F%8D%E5%B0%84/9.jpg" class="" title="img"><p>另外，平面反射与实时捕获不同，它是支持实时捕获的。</p><br/><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>调节全局 SSR 屏幕空间反射作为保下限，利用反射捕获等工具来增强反射效果。</li><li>对于移动应用、VR应用等性能吃紧的设备场景，合理减少反射分别率，甚至关闭复杂反射计算以提高性能。<ul><li>调整 UE4 反射分辨率在项目设置中，搜索 <code>反射/Reflection</code>可以看到</li><li>反射分辨率多少合适， 64-128 都是相对高性能的，通常为了效果可以调到 1024，甚至 2048</li></ul></li><li>减少过多的反射捕获重叠，最佳实践不超过 8个，超过 20-40 个会有明显的影响 </li><li>即使把所有反射关闭，也会发现还有一些反射，这是因为 UE4 中 skylight 也具备反射捕获的能力，相当于为整个场景提供了低成本的备用反射捕获。</li></ol>]]></content:encoded>
      
      
      <category domain="https://blog.liluhui.cn/categories/%E6%B8%B2%E6%9F%93/">渲染</category>
      
      
      <category domain="https://blog.liluhui.cn/tags/UnrealEngine/">UnrealEngine</category>
      
      
      <comments>https://blog.liluhui.cn/2022/07/24/%E5%8F%8D%E5%B0%84/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
